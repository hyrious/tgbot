---
name: Telegram Bot API
children:
- name: Recent changes
  children:
  - name: March 9, 2023
    children: []
    desc:
    - name: p
      content: Bot API 6.6
    - name: ul
      content:
      - Added the ability to set different bot descriptions for different user languages using the method setMyDescription.
      - Added the ability to get the current bot description in the given language as the class BotDescription using the method getMyDescription.
      - Added the ability to set different bot short descriptions for different user languages using the method setMyShortDescription.
      - Added the ability to get the current bot short description in the given language as the class BotShortDescription using the method getMyShortDescription.
      - Added the parameter emoji to the method sendSticker to specify an emoji for just uploaded stickers.
      - Added support for the creation of custom emoji sticker sets in createNewStickerSet.
      - Added the parameter needs_repainting to the method createNewStickerSet to automatically change the color of emoji based on context (e.g., use text color in messages, accent color in statuses, etc.).
      - Added the field needs_repainting to the class Sticker.
      - Replaced the parameters png_sticker, tgs_sticker, webm_sticker, emojis and mask_position in the method addStickerToSet with the parameter sticker of the type InputSticker.
      - Added support for the creation of sticker sets with multiple initial stickers in createNewStickerSet by replacing the parameters png_sticker, tgs_sticker, webm_sticker, emojis and mask_position with the parameters stickers and sticker_format.
      - Added support for .WEBP files in createNewStickerSet and addStickerToSet.
      - Added support for .WEBP, .TGS, and .WEBM files in uploadStickerFile by replacing the parameter png_sticker in the method uploadStickerFile with the parameters sticker and sticker_format.
      - Added the ability to specify search keywords for stickers added to sticker sets.
      - Added the method setCustomEmojiStickerSetThumbnail for editing the thumbnail of custom emoji sticker sets created by the bot.
      - Added the method setStickerSetTitle for editing the title of sticker sets created by the bot.
      - Added the method deleteStickerSet for complete deletion of a given sticker set that was created by the bot.
      - Added the method setStickerEmojiList for changing the list of emoji associated with a sticker.
      - Added the method setStickerKeywords for changing the search keywords assigned to a sticker.
      - Added the method setStickerMaskPosition for changing the mask position of a mask sticker.
      - Renamed the field thumb in the classes Animation, Audio, Document, Sticker, Video, VideoNote, InputMediaAnimation, InputMediaAudio, InputMediaDocument, InputMediaVideo, StickerSet to thumbnail.
      - Renamed the parameter thumb in the methods sendAnimation, sendAudio, sendDocument, sendVideo, sendVideoNote to thumbnail.
      - Renamed the method setStickerSetThumb to setStickerSetThumbnail and its parameter thumb to thumbnail.
      - Renamed the fields thumb_url, thumb_width, and thumb_height in the classes InlineQueryResultArticle, InlineQueryResultContact, InlineQueryResultDocument, InlineQueryResultLocation, and InlineQueryResultVenue to thumbnail_url, thumbnail_width, and thumbnail_height respectively.
      - Renamed the field thumb_url in the classes InlineQueryResultPhoto and InlineQueryResultVideo to thumbnail_url.
      - Renamed the fields thumb_url and thumb_mime_type in the classes InlineQueryResultGif, and InlineQueryResultMpeg4Gif to thumbnail_url and thumbnail_mime_type respectively.
  - name: February 3, 2023
    children: []
    desc:
    - name: p
      content: Bot API 6.5
    - name: ul
      content:
      - Added requests for users and chats and support for granular media permissions.
      - Added the class KeyboardButtonRequestUser and the field request_user to the class KeyboardButton.
      - Added the class KeyboardButtonRequestChat and the field request_chat to the class KeyboardButton.
      - Added the classes UserShared, ChatShared and the fields user_shared, and chat_shared to the class Message.
      - Replaced the fields can_send_media_messages in the classes ChatMemberRestricted and ChatPermissions with separate fields can_send_audios, can_send_documents, can_send_photos, can_send_videos, can_send_video_notes, and can_send_voice_notes for different media types.
      - Added the parameter use_independent_chat_permissions to the methods restrictChatMember and setChatPermissions.
      - Added the field user_chat_id to the class ChatJoinRequest.
  - name: December 30, 2022
    children: []
    desc:
    - name: p
      content: Bot API 6.4
    - name: ul
      content:
      - Added the field is_persistent to the class ReplyKeyboardMarkup, allowing to control when the keyboard is shown.
      - Added the parameter has_spoiler to the methods sendPhoto, sendVideo, and sendAnimation.
      - Added the field has_spoiler to the classes InputMediaPhoto, InputMediaVideo, and InputMediaAnimation.
      - Added the field has_media_spoiler to the class Message.
      - The parameters name and icon_custom_emoji_id of the method editForumTopic are now optional. If they are omitted, the existing values are kept.
      - Added the classes ForumTopicEdited, GeneralForumTopicHidden, GeneralForumTopicUnhidden, and WriteAccessAllowed and the fields forum_topic_edited, general_forum_topic_hidden, general_forum_topic_unhidden, and write_access_allowed to the class Message.
      - Added the methods editGeneralForumTopic, closeGeneralForumTopic, reopenGeneralForumTopic, hideGeneralForumTopic, unhideGeneralForumTopic for managing the General topic in forums.
      - Added the parameter message_thread_id to the method sendChatAction for sending chat actions to a specific message thread or a forum topic.
      - Added the field has_hidden_members to the class Chat. Note that the method getChatMember is only guaranteed to work if the bot is an administrator in the chat.
      - Added the field has_aggressive_anti_spam_enabled to the class Chat.
      - Added Web App events qrTextReceived and clipboardTextReceived.
      - Added the field platform to the class WebApp.
      - Added the methods showScanQrPopup, closeScanQrPopup, and readTextFromClipboard to the class WebApp.
      - Added the parameter options to the method openLink of the class WebApp.
  - name: November 5, 2022
    children: []
    desc:
    - name: p
      content: Bot API 6.3
    - name: ul
      content:
      - Added support for Topics in Groups.
      - Added the field is_forum to the class Chat.
      - Added the fields is_topic_message and message_thread_id to the class Message to allow detection of messages belonging to a forum topic and their message thread identifier.
      - Added the classes ForumTopicCreated, ForumTopicClosed, and ForumTopicReopened and the fields forum_topic_created, forum_topic_closed, and forum_topic_reopened to the class Message. Note that service messages about forum topic creation can't be deleted with the deleteMessage method.
      - Added the field can_manage_topics to the classes ChatAdministratorRights, ChatPermissions, ChatMemberAdministrator, and ChatMemberRestricted.
      - Added the parameter can_manage_topics to the method promoteChatMember.
      - Added the methods createForumTopic, editForumTopic, closeForumTopic, reopenForumTopic, deleteForumTopic, unpinAllForumTopicMessages, and getForumTopicIconStickers for forum topic management.
      - Added the parameter message_thread_id to the methods sendMessage, sendPhoto, sendVideo, sendAnimation, sendAudio, sendDocument, sendSticker, sendVideoNote, sendVoice, sendLocation, sendVenue, sendContact, sendPoll, sendDice, sendInvoice, sendGame, sendMediaGroup, copyMessage, forwardMessage to support sending of messages to a forum topic.
      - Added support for Multiple Usernames via the field active_usernames in the class Chat.
      - Added the field emoji_status_custom_emoji_id to the class Chat.
    - name: p
      content: See earlier changes Â»
  desc:
  - name: blockquote
    content: Subscribe to @BotNews to be the first to know about the latest updates and join the discussion in @BotTalk
- name: Authorizing your bot
  children: []
  desc:
  - name: p
    content: Each bot is given a unique authentication token when it is created. The token looks something like 123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11, but we'll use simply <token> in this document instead. You can learn about obtaining tokens and generating new ones in this document.
- name: Making requests
  children:
  - name: Making requests when getting updates
    children: []
    desc:
    - name: p
      content: If you're using webhooks, you can perform a request to the Bot API while sending an answer to the webhook. Use either application/json or application/x-www-form-urlencoded or multipart/form-data response content type for passing parameters. Specify the method to be invoked in the method parameter of the request. It's not possible to know that such a request was successful or get its result.
    - name: blockquote
      content: Please see our FAQ for examples.
  desc:
  - name: p
    content: 'All queries to the Telegram Bot API must be served over HTTPS and need to be presented in this form: https://api.telegram.org/bot<token>/METHOD_NAME. Like this for example:'
  - name: pre
    content: https://api.telegram.org/bot123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11/getMe
  - name: p
    content: 'We support GET and POST HTTP methods. We support four ways of passing parameters in Bot API requests:'
  - name: ul
    content:
    - URL query string
    - application/x-www-form-urlencoded
    - application/json (except for uploading files)
    - multipart/form-data (use to upload files)
  - name: p
    content: The response contains a JSON object, which always has a Boolean field 'ok' and may have an optional String field 'description' with a human-readable description of the result. If 'ok' equals True, the request was successful and the result of the query can be found in the 'result' field. In case of an unsuccessful request, 'ok' equals false and the error is explained in the 'description'. An Integer 'error_code' field is also returned, but its contents are subject to change in the future. Some errors may also have an optional field 'parameters' of the type ResponseParameters, which can help to automatically handle the error.
  - name: ul
    content:
    - All methods in the Bot API are case-insensitive.
    - All queries must be made using UTF-8.
- name: Using a Local Bot API Server
  children:
  - name: Do I need a Local Bot API Server
    children: []
    desc:
    - name: p
      content: The majority of bots will be OK with the default configuration, running on our servers. But if you feel that you need one of these features, you're welcome to switch to your own at any time.
  desc:
  - name: p
    content: 'The Bot API server source code is available at telegram-bot-api. You can run it locally and send the requests to your own server instead of https://api.telegram.org. If you switch to a local Bot API server, your bot will be able to:'
  - name: ul
    content:
    - Download files without a size limit.
    - Upload files up to 2000 MB.
    - Upload files using their local path and the file URI scheme.
    - Use an HTTP URL for the webhook.
    - Use any local IP address for the webhook.
    - Use any port for the webhook.
    - Set max_webhook_connections up to 100000.
    - Receive the absolute local path as a value of the file_path field without the need to download the file after a getFile request.
- name: Getting updates
  children:
  - name: Update
    children: []
    desc:
    - name: p
      content: This object represents an incoming update.At most one of the optional parameters can be present in any given update.
    table:
    - Field: update_id
      Type: Integer
      Description: The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you're using webhooks, since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.
    - Field: message
      Type: Message
      Description: Optional. New incoming message of any kind - text, photo, sticker, etc.
    - Field: edited_message
      Type: Message
      Description: Optional. New version of a message that is known to the bot and was edited
    - Field: channel_post
      Type: Message
      Description: Optional. New incoming channel post of any kind - text, photo, sticker, etc.
    - Field: edited_channel_post
      Type: Message
      Description: Optional. New version of a channel post that is known to the bot and was edited
    - Field: inline_query
      Type: InlineQuery
      Description: Optional. New incoming inline query
    - Field: chosen_inline_result
      Type: ChosenInlineResult
      Description: Optional. The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the feedback collecting for details on how to enable these updates for your bot.
    - Field: callback_query
      Type: CallbackQuery
      Description: Optional. New incoming callback query
    - Field: shipping_query
      Type: ShippingQuery
      Description: Optional. New incoming shipping query. Only for invoices with flexible price
    - Field: pre_checkout_query
      Type: PreCheckoutQuery
      Description: Optional. New incoming pre-checkout query. Contains full information about checkout
    - Field: poll
      Type: Poll
      Description: Optional. New poll state. Bots receive only updates about stopped polls and polls, which are sent by the bot
    - Field: poll_answer
      Type: PollAnswer
      Description: Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself.
    - Field: my_chat_member
      Type: ChatMemberUpdated
      Description: Optional. The bot's chat member status was updated in a chat. For private chats, this update is received only when the bot is blocked or unblocked by the user.
    - Field: chat_member
      Type: ChatMemberUpdated
      Description: Optional. A chat member's status was updated in a chat. The bot must be an administrator in the chat and must explicitly specify âchat_memberâ in the list of allowed_updates to receive these updates.
    - Field: chat_join_request
      Type: ChatJoinRequest
      Description: Optional. A request to join the chat has been sent. The bot must have the can_invite_users administrator right in the chat to receive these updates.
  - name: getUpdates
    children: []
    desc:
    - name: p
      content: Use this method to receive incoming updates using long polling (wiki). Returns an Array of Update objects.
    - name: blockquote
      content: Notes1. This method will not work if an outgoing webhook is set up.2. In order to avoid getting duplicate updates, recalculate offset after each server response.
    table:
    - Parameter: offset
      Type: Integer
      Required: Optional
      Description: Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as getUpdates is called with an offset higher than its update_id. The negative offset can be specified to retrieve updates starting from -offset update from the end of the updates queue. All previous updates will be forgotten.
    - Parameter: limit
      Type: Integer
      Required: Optional
      Description: Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
    - Parameter: timeout
      Type: Integer
      Required: Optional
      Description: Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.
    - Parameter: allowed_updates
      Type: Array of String
      Required: Optional
      Description: A JSON-serialized list of the update types you want your bot to receive. For example, specify [âmessageâ, âedited_channel_postâ, âcallback_queryâ] to only receive updates of these types. See Update for a complete list of available update types. Specify an empty list to receive all update types except chat_member (default). If not specified, the previous setting will be used.Please note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time.
  - name: setWebhook
    children: []
    desc:
    - name: p
      content: Use this method to specify a URL and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified URL, containing a JSON-serialized Update. In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns True on success.
    - name: p
      content: If you'd like to make sure that the webhook was set by you, you can specify secret data in the parameter secret_token. If specified, the request will contain a header âX-Telegram-Bot-Api-Secret-Tokenâ with the secret token as content.
    - name: blockquote
      content: |-
        Notes1. You will not be able to receive updates using getUpdates for as long as an outgoing webhook is set up.2. To use a self-signed certificate, you need to upload your public key certificate using certificate parameter. Please upload as InputFile, sending a String will not work.3. Ports currently supported for webhooks: 443, 80, 88, 8443.
        If you're having any trouble setting up webhooks, please check out this amazing guide to webhooks.
    table:
    - Parameter: url
      Type: String
      Required: 'Yes'
      Description: HTTPS URL to send updates to. Use an empty string to remove webhook integration
    - Parameter: certificate
      Type: InputFile
      Required: Optional
      Description: Upload your public key certificate so that the root certificate in use can be checked. See our self-signed guide for details.
    - Parameter: ip_address
      Type: String
      Required: Optional
      Description: The fixed IP address which will be used to send webhook requests instead of the IP address resolved through DNS
    - Parameter: max_connections
      Type: Integer
      Required: Optional
      Description: The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to 40. Use lower values to limit the load on your bot's server, and higher values to increase your bot's throughput.
    - Parameter: allowed_updates
      Type: Array of String
      Required: Optional
      Description: A JSON-serialized list of the update types you want your bot to receive. For example, specify [âmessageâ, âedited_channel_postâ, âcallback_queryâ] to only receive updates of these types. See Update for a complete list of available update types. Specify an empty list to receive all update types except chat_member (default). If not specified, the previous setting will be used.Please note that this parameter doesn't affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time.
    - Parameter: drop_pending_updates
      Type: Boolean
      Required: Optional
      Description: Pass True to drop all pending updates
    - Parameter: secret_token
      Type: String
      Required: Optional
      Description: A secret token to be sent in a header âX-Telegram-Bot-Api-Secret-Tokenâ in every webhook request, 1-256 characters. Only characters A-Z, a-z, 0-9, _ and - are allowed. The header is useful to ensure that the request comes from a webhook set by you.
  - name: deleteWebhook
    children: []
    desc:
    - name: p
      content: Use this method to remove webhook integration if you decide to switch back to getUpdates. Returns True on success.
    table:
    - Parameter: drop_pending_updates
      Type: Boolean
      Required: Optional
      Description: Pass True to drop all pending updates
  - name: getWebhookInfo
    children: []
    desc:
    - name: p
      content: Use this method to get current webhook status. Requires no parameters. On success, returns a WebhookInfo object. If the bot is using getUpdates, will return an object with the url field empty.
  - name: WebhookInfo
    children: []
    desc:
    - name: p
      content: Describes the current status of a webhook.
    table:
    - Field: url
      Type: String
      Description: Webhook URL, may be empty if webhook is not set up
    - Field: has_custom_certificate
      Type: Boolean
      Description: True, if a custom certificate was provided for webhook certificate checks
    - Field: pending_update_count
      Type: Integer
      Description: Number of updates awaiting delivery
    - Field: ip_address
      Type: String
      Description: Optional. Currently used webhook IP address
    - Field: last_error_date
      Type: Integer
      Description: Optional. Unix time for the most recent error that happened when trying to deliver an update via webhook
    - Field: last_error_message
      Type: String
      Description: Optional. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook
    - Field: last_synchronization_error_date
      Type: Integer
      Description: Optional. Unix time of the most recent error that happened when trying to synchronize available updates with Telegram datacenters
    - Field: max_connections
      Type: Integer
      Description: Optional. The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery
    - Field: allowed_updates
      Type: Array of String
      Description: Optional. A list of update types the bot is subscribed to. Defaults to all update types except chat_member
  desc:
  - name: p
    content: There are two mutually exclusive ways of receiving updates for your bot - the getUpdates method on one hand and webhooks on the other. Incoming updates are stored on the server until the bot receives them either way, but they will not be kept longer than 24 hours.
  - name: p
    content: Regardless of which option you choose, you will receive JSON-serialized Update objects as a result.
- name: Available types
  children:
  - name: User
    children: []
    desc:
    - name: p
      content: This object represents a Telegram user or bot.
    table:
    - Field: id
      Type: Integer
      Description: Unique identifier for this user or bot. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier.
    - Field: is_bot
      Type: Boolean
      Description: True, if this user is a bot
    - Field: first_name
      Type: String
      Description: User's or bot's first name
    - Field: last_name
      Type: String
      Description: Optional. User's or bot's last name
    - Field: username
      Type: String
      Description: Optional. User's or bot's username
    - Field: language_code
      Type: String
      Description: Optional. IETF language tag of the user's language
    - Field: is_premium
      Type: 'True'
      Description: Optional. True, if this user is a Telegram Premium user
    - Field: added_to_attachment_menu
      Type: 'True'
      Description: Optional. True, if this user added the bot to the attachment menu
    - Field: can_join_groups
      Type: Boolean
      Description: Optional. True, if the bot can be invited to groups. Returned only in getMe.
    - Field: can_read_all_group_messages
      Type: Boolean
      Description: Optional. True, if privacy mode is disabled for the bot. Returned only in getMe.
    - Field: supports_inline_queries
      Type: Boolean
      Description: Optional. True, if the bot supports inline queries. Returned only in getMe.
  - name: Chat
    children: []
    desc:
    - name: p
      content: This object represents a chat.
    table:
    - Field: id
      Type: Integer
      Description: Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
    - Field: type
      Type: String
      Description: Type of chat, can be either âprivateâ, âgroupâ, âsupergroupâ or âchannelâ
    - Field: title
      Type: String
      Description: Optional. Title, for supergroups, channels and group chats
    - Field: username
      Type: String
      Description: Optional. Username, for private chats, supergroups and channels if available
    - Field: first_name
      Type: String
      Description: Optional. First name of the other party in a private chat
    - Field: last_name
      Type: String
      Description: Optional. Last name of the other party in a private chat
    - Field: is_forum
      Type: 'True'
      Description: Optional. True, if the supergroup chat is a forum (has topics enabled)
    - Field: photo
      Type: ChatPhoto
      Description: Optional. Chat photo. Returned only in getChat.
    - Field: active_usernames
      Type: Array of String
      Description: Optional. If non-empty, the list of all active chat usernames; for private chats, supergroups and channels. Returned only in getChat.
    - Field: emoji_status_custom_emoji_id
      Type: String
      Description: Optional. Custom emoji identifier of emoji status of the other party in a private chat. Returned only in getChat.
    - Field: bio
      Type: String
      Description: Optional. Bio of the other party in a private chat. Returned only in getChat.
    - Field: has_private_forwards
      Type: 'True'
      Description: Optional. True, if privacy settings of the other party in the private chat allows to use tg://user?id=<user_id> links only in chats with the user. Returned only in getChat.
    - Field: has_restricted_voice_and_video_messages
      Type: 'True'
      Description: Optional. True, if the privacy settings of the other party restrict sending voice and video note messages in the private chat. Returned only in getChat.
    - Field: join_to_send_messages
      Type: 'True'
      Description: Optional. True, if users need to join the supergroup before they can send messages. Returned only in getChat.
    - Field: join_by_request
      Type: 'True'
      Description: Optional. True, if all users directly joining the supergroup need to be approved by supergroup administrators. Returned only in getChat.
    - Field: description
      Type: String
      Description: Optional. Description, for groups, supergroups and channel chats. Returned only in getChat.
    - Field: invite_link
      Type: String
      Description: Optional. Primary invite link, for groups, supergroups and channel chats. Returned only in getChat.
    - Field: pinned_message
      Type: Message
      Description: Optional. The most recent pinned message (by sending date). Returned only in getChat.
    - Field: permissions
      Type: ChatPermissions
      Description: Optional. Default chat member permissions, for groups and supergroups. Returned only in getChat.
    - Field: slow_mode_delay
      Type: Integer
      Description: Optional. For supergroups, the minimum allowed delay between consecutive messages sent by each unpriviledged user; in seconds. Returned only in getChat.
    - Field: message_auto_delete_time
      Type: Integer
      Description: Optional. The time after which all messages sent to the chat will be automatically deleted; in seconds. Returned only in getChat.
    - Field: has_aggressive_anti_spam_enabled
      Type: 'True'
      Description: Optional. True, if aggressive anti-spam checks are enabled in the supergroup. The field is only available to chat administrators. Returned only in getChat.
    - Field: has_hidden_members
      Type: 'True'
      Description: Optional. True, if non-administrators can only get the list of bots and administrators in the chat. Returned only in getChat.
    - Field: has_protected_content
      Type: 'True'
      Description: Optional. True, if messages from the chat can't be forwarded to other chats. Returned only in getChat.
    - Field: sticker_set_name
      Type: String
      Description: Optional. For supergroups, name of group sticker set. Returned only in getChat.
    - Field: can_set_sticker_set
      Type: 'True'
      Description: Optional. True, if the bot can change the group sticker set. Returned only in getChat.
    - Field: linked_chat_id
      Type: Integer
      Description: Optional. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. Returned only in getChat.
    - Field: location
      Type: ChatLocation
      Description: Optional. For supergroups, the location to which the supergroup is connected. Returned only in getChat.
  - name: Message
    children: []
    desc:
    - name: p
      content: This object represents a message.
    table:
    - Field: message_id
      Type: Integer
      Description: Unique message identifier inside this chat
    - Field: message_thread_id
      Type: Integer
      Description: Optional. Unique identifier of a message thread to which the message belongs; for supergroups only
    - Field: from
      Type: User
      Description: Optional. Sender of the message; empty for messages sent to channels. For backward compatibility, the field contains a fake sender user in non-channel chats, if the message was sent on behalf of a chat.
    - Field: sender_chat
      Type: Chat
      Description: Optional. Sender of the message, sent on behalf of a chat. For example, the channel itself for channel posts, the supergroup itself for messages from anonymous group administrators, the linked channel for messages automatically forwarded to the discussion group. For backward compatibility, the field from contains a fake sender user in non-channel chats, if the message was sent on behalf of a chat.
    - Field: date
      Type: Integer
      Description: Date the message was sent in Unix time
    - Field: chat
      Type: Chat
      Description: Conversation the message belongs to
    - Field: forward_from
      Type: User
      Description: Optional. For forwarded messages, sender of the original message
    - Field: forward_from_chat
      Type: Chat
      Description: Optional. For messages forwarded from channels or from anonymous administrators, information about the original sender chat
    - Field: forward_from_message_id
      Type: Integer
      Description: Optional. For messages forwarded from channels, identifier of the original message in the channel
    - Field: forward_signature
      Type: String
      Description: Optional. For forwarded messages that were originally sent in channels or by an anonymous chat administrator, signature of the message sender if present
    - Field: forward_sender_name
      Type: String
      Description: Optional. Sender's name for messages forwarded from users who disallow adding a link to their account in forwarded messages
    - Field: forward_date
      Type: Integer
      Description: Optional. For forwarded messages, date the original message was sent in Unix time
    - Field: is_topic_message
      Type: 'True'
      Description: Optional. True, if the message is sent to a forum topic
    - Field: is_automatic_forward
      Type: 'True'
      Description: Optional. True, if the message is a channel post that was automatically forwarded to the connected discussion group
    - Field: reply_to_message
      Type: Message
      Description: Optional. For replies, the original message. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply.
    - Field: via_bot
      Type: User
      Description: Optional. Bot through which the message was sent
    - Field: edit_date
      Type: Integer
      Description: Optional. Date the message was last edited in Unix time
    - Field: has_protected_content
      Type: 'True'
      Description: Optional. True, if the message can't be forwarded
    - Field: media_group_id
      Type: String
      Description: Optional. The unique identifier of a media message group this message belongs to
    - Field: author_signature
      Type: String
      Description: Optional. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator
    - Field: text
      Type: String
      Description: Optional. For text messages, the actual UTF-8 text of the message
    - Field: entities
      Type: Array of MessageEntity
      Description: Optional. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text
    - Field: animation
      Type: Animation
      Description: Optional. Message is an animation, information about the animation. For backward compatibility, when this field is set, the document field will also be set
    - Field: audio
      Type: Audio
      Description: Optional. Message is an audio file, information about the file
    - Field: document
      Type: Document
      Description: Optional. Message is a general file, information about the file
    - Field: photo
      Type: Array of PhotoSize
      Description: Optional. Message is a photo, available sizes of the photo
    - Field: sticker
      Type: Sticker
      Description: Optional. Message is a sticker, information about the sticker
    - Field: video
      Type: Video
      Description: Optional. Message is a video, information about the video
    - Field: video_note
      Type: VideoNote
      Description: Optional. Message is a video note, information about the video message
    - Field: voice
      Type: Voice
      Description: Optional. Message is a voice message, information about the file
    - Field: caption
      Type: String
      Description: Optional. Caption for the animation, audio, document, photo, video or voice
    - Field: caption_entities
      Type: Array of MessageEntity
      Description: Optional. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption
    - Field: has_media_spoiler
      Type: 'True'
      Description: Optional. True, if the message media is covered by a spoiler animation
    - Field: contact
      Type: Contact
      Description: Optional. Message is a shared contact, information about the contact
    - Field: dice
      Type: Dice
      Description: Optional. Message is a dice with random value
    - Field: game
      Type: Game
      Description: Optional. Message is a game, information about the game. More about games Â»
    - Field: poll
      Type: Poll
      Description: Optional. Message is a native poll, information about the poll
    - Field: venue
      Type: Venue
      Description: Optional. Message is a venue, information about the venue. For backward compatibility, when this field is set, the location field will also be set
    - Field: location
      Type: Location
      Description: Optional. Message is a shared location, information about the location
    - Field: new_chat_members
      Type: Array of User
      Description: Optional. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)
    - Field: left_chat_member
      Type: User
      Description: Optional. A member was removed from the group, information about them (this member may be the bot itself)
    - Field: new_chat_title
      Type: String
      Description: Optional. A chat title was changed to this value
    - Field: new_chat_photo
      Type: Array of PhotoSize
      Description: Optional. A chat photo was change to this value
    - Field: delete_chat_photo
      Type: 'True'
      Description: 'Optional. Service message: the chat photo was deleted'
    - Field: group_chat_created
      Type: 'True'
      Description: 'Optional. Service message: the group has been created'
    - Field: supergroup_chat_created
      Type: 'True'
      Description: 'Optional. Service message: the supergroup has been created. This field can''t be received in a message coming through updates, because bot can''t be a member of a supergroup when it is created. It can only be found in reply_to_message if someone replies to a very first message in a directly created supergroup.'
    - Field: channel_chat_created
      Type: 'True'
      Description: 'Optional. Service message: the channel has been created. This field can''t be received in a message coming through updates, because bot can''t be a member of a channel when it is created. It can only be found in reply_to_message if someone replies to a very first message in a channel.'
    - Field: message_auto_delete_timer_changed
      Type: MessageAutoDeleteTimerChanged
      Description: 'Optional. Service message: auto-delete timer settings changed in the chat'
    - Field: migrate_to_chat_id
      Type: Integer
      Description: Optional. The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
    - Field: migrate_from_chat_id
      Type: Integer
      Description: Optional. The supergroup has been migrated from a group with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
    - Field: pinned_message
      Type: Message
      Description: Optional. Specified message was pinned. Note that the Message object in this field will not contain further reply_to_message fields even if it is itself a reply.
    - Field: invoice
      Type: Invoice
      Description: Optional. Message is an invoice for a payment, information about the invoice. More about payments Â»
    - Field: successful_payment
      Type: SuccessfulPayment
      Description: Optional. Message is a service message about a successful payment, information about the payment. More about payments Â»
    - Field: user_shared
      Type: UserShared
      Description: 'Optional. Service message: a user was shared with the bot'
    - Field: chat_shared
      Type: ChatShared
      Description: 'Optional. Service message: a chat was shared with the bot'
    - Field: connected_website
      Type: String
      Description: Optional. The domain name of the website on which the user has logged in. More about Telegram Login Â»
    - Field: write_access_allowed
      Type: WriteAccessAllowed
      Description: 'Optional. Service message: the user allowed the bot added to the attachment menu to write messages'
    - Field: passport_data
      Type: PassportData
      Description: Optional. Telegram Passport data
    - Field: proximity_alert_triggered
      Type: ProximityAlertTriggered
      Description: Optional. Service message. A user in the chat triggered another user's proximity alert while sharing Live Location.
    - Field: forum_topic_created
      Type: ForumTopicCreated
      Description: 'Optional. Service message: forum topic created'
    - Field: forum_topic_edited
      Type: ForumTopicEdited
      Description: 'Optional. Service message: forum topic edited'
    - Field: forum_topic_closed
      Type: ForumTopicClosed
      Description: 'Optional. Service message: forum topic closed'
    - Field: forum_topic_reopened
      Type: ForumTopicReopened
      Description: 'Optional. Service message: forum topic reopened'
    - Field: general_forum_topic_hidden
      Type: GeneralForumTopicHidden
      Description: 'Optional. Service message: the ''General'' forum topic hidden'
    - Field: general_forum_topic_unhidden
      Type: GeneralForumTopicUnhidden
      Description: 'Optional. Service message: the ''General'' forum topic unhidden'
    - Field: video_chat_scheduled
      Type: VideoChatScheduled
      Description: 'Optional. Service message: video chat scheduled'
    - Field: video_chat_started
      Type: VideoChatStarted
      Description: 'Optional. Service message: video chat started'
    - Field: video_chat_ended
      Type: VideoChatEnded
      Description: 'Optional. Service message: video chat ended'
    - Field: video_chat_participants_invited
      Type: VideoChatParticipantsInvited
      Description: 'Optional. Service message: new participants invited to a video chat'
    - Field: web_app_data
      Type: WebAppData
      Description: 'Optional. Service message: data sent by a Web App'
    - Field: reply_markup
      Type: InlineKeyboardMarkup
      Description: Optional. Inline keyboard attached to the message. login_url buttons are represented as ordinary url buttons.
  - name: MessageId
    children: []
    desc:
    - name: p
      content: This object represents a unique message identifier.
    table:
    - Field: message_id
      Type: Integer
      Description: Unique message identifier
  - name: MessageEntity
    children: []
    desc:
    - name: p
      content: This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.
    table:
    - Field: type
      Type: String
      Description: Type of the entity. Currently, can be âmentionâ (@username), âhashtagâ (#hashtag), âcashtagâ ($USD), âbot_commandâ (/start@jobs_bot), âurlâ (https://telegram.org), âemailâ (do-not-reply@telegram.org), âphone_numberâ (+1-212-555-0123), âboldâ (bold text), âitalicâ (italic text), âunderlineâ (underlined text), âstrikethroughâ (strikethrough text), âspoilerâ (spoiler message), âcodeâ (monowidth string), âpreâ (monowidth block), âtext_linkâ (for clickable text URLs), âtext_mentionâ (for users without usernames), âcustom_emojiâ (for inline custom emoji stickers)
    - Field: offset
      Type: Integer
      Description: Offset in UTF-16 code units to the start of the entity
    - Field: length
      Type: Integer
      Description: Length of the entity in UTF-16 code units
    - Field: url
      Type: String
      Description: Optional. For âtext_linkâ only, URL that will be opened after user taps on the text
    - Field: user
      Type: User
      Description: Optional. For âtext_mentionâ only, the mentioned user
    - Field: language
      Type: String
      Description: Optional. For âpreâ only, the programming language of the entity text
    - Field: custom_emoji_id
      Type: String
      Description: Optional. For âcustom_emojiâ only, unique identifier of the custom emoji. Use getCustomEmojiStickers to get full information about the sticker
  - name: PhotoSize
    children: []
    desc:
    - name: p
      content: This object represents one size of a photo or a file / sticker thumbnail.
    table:
    - Field: file_id
      Type: String
      Description: Identifier for this file, which can be used to download or reuse the file
    - Field: file_unique_id
      Type: String
      Description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    - Field: width
      Type: Integer
      Description: Photo width
    - Field: height
      Type: Integer
      Description: Photo height
    - Field: file_size
      Type: Integer
      Description: Optional. File size in bytes
  - name: Animation
    children: []
    desc:
    - name: p
      content: This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).
    table:
    - Field: file_id
      Type: String
      Description: Identifier for this file, which can be used to download or reuse the file
    - Field: file_unique_id
      Type: String
      Description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    - Field: width
      Type: Integer
      Description: Video width as defined by sender
    - Field: height
      Type: Integer
      Description: Video height as defined by sender
    - Field: duration
      Type: Integer
      Description: Duration of the video in seconds as defined by sender
    - Field: thumbnail
      Type: PhotoSize
      Description: Optional. Animation thumbnail as defined by sender
    - Field: file_name
      Type: String
      Description: Optional. Original animation filename as defined by sender
    - Field: mime_type
      Type: String
      Description: Optional. MIME type of the file as defined by sender
    - Field: file_size
      Type: Integer
      Description: Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value.
  - name: Audio
    children: []
    desc:
    - name: p
      content: This object represents an audio file to be treated as music by the Telegram clients.
    table:
    - Field: file_id
      Type: String
      Description: Identifier for this file, which can be used to download or reuse the file
    - Field: file_unique_id
      Type: String
      Description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    - Field: duration
      Type: Integer
      Description: Duration of the audio in seconds as defined by sender
    - Field: performer
      Type: String
      Description: Optional. Performer of the audio as defined by sender or by audio tags
    - Field: title
      Type: String
      Description: Optional. Title of the audio as defined by sender or by audio tags
    - Field: file_name
      Type: String
      Description: Optional. Original filename as defined by sender
    - Field: mime_type
      Type: String
      Description: Optional. MIME type of the file as defined by sender
    - Field: file_size
      Type: Integer
      Description: Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value.
    - Field: thumbnail
      Type: PhotoSize
      Description: Optional. Thumbnail of the album cover to which the music file belongs
  - name: Document
    children: []
    desc:
    - name: p
      content: This object represents a general file (as opposed to photos, voice messages and audio files).
    table:
    - Field: file_id
      Type: String
      Description: Identifier for this file, which can be used to download or reuse the file
    - Field: file_unique_id
      Type: String
      Description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    - Field: thumbnail
      Type: PhotoSize
      Description: Optional. Document thumbnail as defined by sender
    - Field: file_name
      Type: String
      Description: Optional. Original filename as defined by sender
    - Field: mime_type
      Type: String
      Description: Optional. MIME type of the file as defined by sender
    - Field: file_size
      Type: Integer
      Description: Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value.
  - name: Video
    children: []
    desc:
    - name: p
      content: This object represents a video file.
    table:
    - Field: file_id
      Type: String
      Description: Identifier for this file, which can be used to download or reuse the file
    - Field: file_unique_id
      Type: String
      Description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    - Field: width
      Type: Integer
      Description: Video width as defined by sender
    - Field: height
      Type: Integer
      Description: Video height as defined by sender
    - Field: duration
      Type: Integer
      Description: Duration of the video in seconds as defined by sender
    - Field: thumbnail
      Type: PhotoSize
      Description: Optional. Video thumbnail
    - Field: file_name
      Type: String
      Description: Optional. Original filename as defined by sender
    - Field: mime_type
      Type: String
      Description: Optional. MIME type of the file as defined by sender
    - Field: file_size
      Type: Integer
      Description: Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value.
  - name: VideoNote
    children: []
    desc:
    - name: p
      content: This object represents a video message (available in Telegram apps as of v.4.0).
    table:
    - Field: file_id
      Type: String
      Description: Identifier for this file, which can be used to download or reuse the file
    - Field: file_unique_id
      Type: String
      Description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    - Field: length
      Type: Integer
      Description: Video width and height (diameter of the video message) as defined by sender
    - Field: duration
      Type: Integer
      Description: Duration of the video in seconds as defined by sender
    - Field: thumbnail
      Type: PhotoSize
      Description: Optional. Video thumbnail
    - Field: file_size
      Type: Integer
      Description: Optional. File size in bytes
  - name: Voice
    children: []
    desc:
    - name: p
      content: This object represents a voice note.
    table:
    - Field: file_id
      Type: String
      Description: Identifier for this file, which can be used to download or reuse the file
    - Field: file_unique_id
      Type: String
      Description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    - Field: duration
      Type: Integer
      Description: Duration of the audio in seconds as defined by sender
    - Field: mime_type
      Type: String
      Description: Optional. MIME type of the file as defined by sender
    - Field: file_size
      Type: Integer
      Description: Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value.
  - name: Contact
    children: []
    desc:
    - name: p
      content: This object represents a phone contact.
    table:
    - Field: phone_number
      Type: String
      Description: Contact's phone number
    - Field: first_name
      Type: String
      Description: Contact's first name
    - Field: last_name
      Type: String
      Description: Optional. Contact's last name
    - Field: user_id
      Type: Integer
      Description: Optional. Contact's user identifier in Telegram. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier.
    - Field: vcard
      Type: String
      Description: Optional. Additional data about the contact in the form of a vCard
  - name: Dice
    children: []
    desc:
    - name: p
      content: This object represents an animated emoji that displays a random value.
    table:
    - Field: emoji
      Type: String
      Description: Emoji on which the dice throw animation is based
    - Field: value
      Type: Integer
      Description: Value of the dice, 1-6 for ââ, ââ and ââ base emoji, 1-5 for ââ and ââ base emoji, 1-64 for ââ base emoji
  - name: PollOption
    children: []
    desc:
    - name: p
      content: This object contains information about one answer option in a poll.
    table:
    - Field: text
      Type: String
      Description: Option text, 1-100 characters
    - Field: voter_count
      Type: Integer
      Description: Number of users that voted for this option
  - name: PollAnswer
    children: []
    desc:
    - name: p
      content: This object represents an answer of a user in a non-anonymous poll.
    table:
    - Field: poll_id
      Type: String
      Description: Unique poll identifier
    - Field: user
      Type: User
      Description: The user, who changed the answer to the poll
    - Field: option_ids
      Type: Array of Integer
      Description: 0-based identifiers of answer options, chosen by the user. May be empty if the user retracted their vote.
  - name: Poll
    children: []
    desc:
    - name: p
      content: This object contains information about a poll.
    table:
    - Field: id
      Type: String
      Description: Unique poll identifier
    - Field: question
      Type: String
      Description: Poll question, 1-300 characters
    - Field: options
      Type: Array of PollOption
      Description: List of poll options
    - Field: total_voter_count
      Type: Integer
      Description: Total number of users that voted in the poll
    - Field: is_closed
      Type: Boolean
      Description: True, if the poll is closed
    - Field: is_anonymous
      Type: Boolean
      Description: True, if the poll is anonymous
    - Field: type
      Type: String
      Description: Poll type, currently can be âregularâ or âquizâ
    - Field: allows_multiple_answers
      Type: Boolean
      Description: True, if the poll allows multiple answers
    - Field: correct_option_id
      Type: Integer
      Description: Optional. 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.
    - Field: explanation
      Type: String
      Description: Optional. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters
    - Field: explanation_entities
      Type: Array of MessageEntity
      Description: Optional. Special entities like usernames, URLs, bot commands, etc. that appear in the explanation
    - Field: open_period
      Type: Integer
      Description: Optional. Amount of time in seconds the poll will be active after creation
    - Field: close_date
      Type: Integer
      Description: Optional. Point in time (Unix timestamp) when the poll will be automatically closed
  - name: Location
    children: []
    desc:
    - name: p
      content: This object represents a point on the map.
    table:
    - Field: longitude
      Type: Float
      Description: Longitude as defined by sender
    - Field: latitude
      Type: Float
      Description: Latitude as defined by sender
    - Field: horizontal_accuracy
      Type: Float number
      Description: Optional. The radius of uncertainty for the location, measured in meters; 0-1500
    - Field: live_period
      Type: Integer
      Description: Optional. Time relative to the message sending date, during which the location can be updated; in seconds. For active live locations only.
    - Field: heading
      Type: Integer
      Description: Optional. The direction in which user is moving, in degrees; 1-360. For active live locations only.
    - Field: proximity_alert_radius
      Type: Integer
      Description: Optional. The maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only.
  - name: Venue
    children: []
    desc:
    - name: p
      content: This object represents a venue.
    table:
    - Field: location
      Type: Location
      Description: Venue location. Can't be a live location
    - Field: title
      Type: String
      Description: Name of the venue
    - Field: address
      Type: String
      Description: Address of the venue
    - Field: foursquare_id
      Type: String
      Description: Optional. Foursquare identifier of the venue
    - Field: foursquare_type
      Type: String
      Description: Optional. Foursquare type of the venue. (For example, âarts_entertainment/defaultâ, âarts_entertainment/aquariumâ or âfood/icecreamâ.)
    - Field: google_place_id
      Type: String
      Description: Optional. Google Places identifier of the venue
    - Field: google_place_type
      Type: String
      Description: Optional. Google Places type of the venue. (See supported types.)
  - name: WebAppData
    children: []
    desc:
    - name: p
      content: Describes data sent from a Web App to the bot.
    table:
    - Field: data
      Type: String
      Description: The data. Be aware that a bad client can send arbitrary data in this field.
    - Field: button_text
      Type: String
      Description: Text of the web_app keyboard button from which the Web App was opened. Be aware that a bad client can send arbitrary data in this field.
  - name: ProximityAlertTriggered
    children: []
    desc:
    - name: p
      content: This object represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user.
    table:
    - Field: traveler
      Type: User
      Description: User that triggered the alert
    - Field: watcher
      Type: User
      Description: User that set the alert
    - Field: distance
      Type: Integer
      Description: The distance between the users
  - name: MessageAutoDeleteTimerChanged
    children: []
    desc:
    - name: p
      content: This object represents a service message about a change in auto-delete timer settings.
    table:
    - Field: message_auto_delete_time
      Type: Integer
      Description: New auto-delete time for messages in the chat; in seconds
  - name: ForumTopicCreated
    children: []
    desc:
    - name: p
      content: This object represents a service message about a new forum topic created in the chat.
    table:
    - Field: name
      Type: String
      Description: Name of the topic
    - Field: icon_color
      Type: Integer
      Description: Color of the topic icon in RGB format
    - Field: icon_custom_emoji_id
      Type: String
      Description: Optional. Unique identifier of the custom emoji shown as the topic icon
  - name: ForumTopicClosed
    children: []
    desc:
    - name: p
      content: This object represents a service message about a forum topic closed in the chat. Currently holds no information.
  - name: ForumTopicEdited
    children: []
    desc:
    - name: p
      content: This object represents a service message about an edited forum topic.
    table:
    - Field: name
      Type: String
      Description: Optional. New name of the topic, if it was edited
    - Field: icon_custom_emoji_id
      Type: String
      Description: Optional. New identifier of the custom emoji shown as the topic icon, if it was edited; an empty string if the icon was removed
  - name: ForumTopicReopened
    children: []
    desc:
    - name: p
      content: This object represents a service message about a forum topic reopened in the chat. Currently holds no information.
  - name: GeneralForumTopicHidden
    children: []
    desc:
    - name: p
      content: This object represents a service message about General forum topic hidden in the chat. Currently holds no information.
  - name: GeneralForumTopicUnhidden
    children: []
    desc:
    - name: p
      content: This object represents a service message about General forum topic unhidden in the chat. Currently holds no information.
  - name: UserShared
    children: []
    desc:
    - name: p
      content: This object contains information about the user whose identifier was shared with the bot using a KeyboardButtonRequestUser button.
    table:
    - Field: request_id
      Type: Integer
      Description: Identifier of the request
    - Field: user_id
      Type: Integer
      Description: Identifier of the shared user. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. The bot may not have access to the user and could be unable to use this identifier, unless the user is already known to the bot by some other means.
  - name: ChatShared
    children: []
    desc:
    - name: p
      content: This object contains information about the chat whose identifier was shared with the bot using a KeyboardButtonRequestChat button.
    table:
    - Field: request_id
      Type: Integer
      Description: Identifier of the request
    - Field: chat_id
      Type: Integer
      Description: Identifier of the shared chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. The bot may not have access to the chat and could be unable to use this identifier, unless the chat is already known to the bot by some other means.
  - name: WriteAccessAllowed
    children: []
    desc:
    - name: p
      content: This object represents a service message about a user allowing a bot added to the attachment menu to write messages. Currently holds no information.
  - name: VideoChatScheduled
    children: []
    desc:
    - name: p
      content: This object represents a service message about a video chat scheduled in the chat.
    table:
    - Field: start_date
      Type: Integer
      Description: Point in time (Unix timestamp) when the video chat is supposed to be started by a chat administrator
  - name: VideoChatStarted
    children: []
    desc:
    - name: p
      content: This object represents a service message about a video chat started in the chat. Currently holds no information.
  - name: VideoChatEnded
    children: []
    desc:
    - name: p
      content: This object represents a service message about a video chat ended in the chat.
    table:
    - Field: duration
      Type: Integer
      Description: Video chat duration in seconds
  - name: VideoChatParticipantsInvited
    children: []
    desc:
    - name: p
      content: This object represents a service message about new members invited to a video chat.
    table:
    - Field: users
      Type: Array of User
      Description: New members that were invited to the video chat
  - name: UserProfilePhotos
    children: []
    desc:
    - name: p
      content: This object represent a user's profile pictures.
    table:
    - Field: total_count
      Type: Integer
      Description: Total number of profile pictures the target user has
    - Field: photos
      Type: Array of Array of PhotoSize
      Description: Requested profile pictures (in up to 4 sizes each)
  - name: File
    children: []
    desc:
    - name: p
      content: This object represents a file ready to be downloaded. The file can be downloaded via the link https://api.telegram.org/file/bot<token>/<file_path>. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile.
    - name: blockquote
      content: The maximum file size to download is 20 MB
    table:
    - Field: file_id
      Type: String
      Description: Identifier for this file, which can be used to download or reuse the file
    - Field: file_unique_id
      Type: String
      Description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    - Field: file_size
      Type: Integer
      Description: Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value.
    - Field: file_path
      Type: String
      Description: Optional. File path. Use https://api.telegram.org/file/bot<token>/<file_path> to get the file.
  - name: WebAppInfo
    children: []
    desc:
    - name: p
      content: Describes a Web App.
    table:
    - Field: url
      Type: String
      Description: An HTTPS URL of a Web App to be opened with additional data as specified in Initializing Web Apps
  - name: ReplyKeyboardMarkup
    children: []
    desc:
    - name: p
      content: This object represents a custom keyboard with reply options (see Introduction to bots for details and examples).
    table:
    - Field: keyboard
      Type: Array of Array of KeyboardButton
      Description: Array of button rows, each represented by an Array of KeyboardButton objects
    - Field: is_persistent
      Type: Boolean
      Description: Optional. Requests clients to always show the keyboard when the regular keyboard is hidden. Defaults to false, in which case the custom keyboard can be hidden and opened with a keyboard icon.
    - Field: resize_keyboard
      Type: Boolean
      Description: Optional. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to false, in which case the custom keyboard is always of the same height as the app's standard keyboard.
    - Field: one_time_keyboard
      Type: Boolean
      Description: Optional. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat - the user can press a special button in the input field to see the custom keyboard again. Defaults to false.
    - Field: input_field_placeholder
      Type: String
      Description: Optional. The placeholder to be shown in the input field when the keyboard is active; 1-64 characters
    - Field: selective
      Type: Boolean
      Description: 'Optional. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot''s message is a reply (has reply_to_message_id), sender of the original message.Example: A user requests to change the bot''s language, bot replies to the request with a keyboard to select the new language. Other users in the group don''t see the keyboard.'
  - name: KeyboardButton
    children: []
    desc:
    - name: p
      content: This object represents one button of the reply keyboard. For simple text buttons, String can be used instead of this object to specify the button text. The optional fields web_app, request_user, request_chat, request_contact, request_location, and request_poll are mutually exclusive.
    - name: p
      content: 'Note: request_contact and request_location options will only work in Telegram versions released after 9 April, 2016. Older clients will display unsupported message.Note: request_poll option will only work in Telegram versions released after 23 January, 2020. Older clients will display unsupported message.Note: web_app option will only work in Telegram versions released after 16 April, 2022. Older clients will display unsupported message.Note: request_user and request_chat options will only work in Telegram versions released after 3 February, 2023. Older clients will display unsupported message.'
    table:
    - Field: text
      Type: String
      Description: Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed
    - Field: request_user
      Type: KeyboardButtonRequestUser
      Description: Optional. If specified, pressing the button will open a list of suitable users. Tapping on any user will send their identifier to the bot in a âuser_sharedâ service message. Available in private chats only.
    - Field: request_chat
      Type: KeyboardButtonRequestChat
      Description: Optional. If specified, pressing the button will open a list of suitable chats. Tapping on a chat will send its identifier to the bot in a âchat_sharedâ service message. Available in private chats only.
    - Field: request_contact
      Type: Boolean
      Description: Optional. If True, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only.
    - Field: request_location
      Type: Boolean
      Description: Optional. If True, the user's current location will be sent when the button is pressed. Available in private chats only.
    - Field: request_poll
      Type: KeyboardButtonPollType
      Description: Optional. If specified, the user will be asked to create a poll and send it to the bot when the button is pressed. Available in private chats only.
    - Field: web_app
      Type: WebAppInfo
      Description: Optional. If specified, the described Web App will be launched when the button is pressed. The Web App will be able to send a âweb_app_dataâ service message. Available in private chats only.
  - name: KeyboardButtonRequestUser
    children: []
    desc:
    - name: p
      content: This object defines the criteria used to request a suitable user. The identifier of the selected user will be shared with the bot when the corresponding button is pressed. More about requesting users Â»
    table:
    - Field: request_id
      Type: Integer
      Description: Signed 32-bit identifier of the request, which will be received back in the UserShared object. Must be unique within the message
    - Field: user_is_bot
      Type: Boolean
      Description: Optional. Pass True to request a bot, pass False to request a regular user. If not specified, no additional restrictions are applied.
    - Field: user_is_premium
      Type: Boolean
      Description: Optional. Pass True to request a premium user, pass False to request a non-premium user. If not specified, no additional restrictions are applied.
  - name: KeyboardButtonRequestChat
    children: []
    desc:
    - name: p
      content: This object defines the criteria used to request a suitable chat. The identifier of the selected chat will be shared with the bot when the corresponding button is pressed. More about requesting chats Â»
    table:
    - Field: request_id
      Type: Integer
      Description: Signed 32-bit identifier of the request, which will be received back in the ChatShared object. Must be unique within the message
    - Field: chat_is_channel
      Type: Boolean
      Description: Pass True to request a channel chat, pass False to request a group or a supergroup chat.
    - Field: chat_is_forum
      Type: Boolean
      Description: Optional. Pass True to request a forum supergroup, pass False to request a non-forum chat. If not specified, no additional restrictions are applied.
    - Field: chat_has_username
      Type: Boolean
      Description: Optional. Pass True to request a supergroup or a channel with a username, pass False to request a chat without a username. If not specified, no additional restrictions are applied.
    - Field: chat_is_created
      Type: Boolean
      Description: Optional. Pass True to request a chat owned by the user. Otherwise, no additional restrictions are applied.
    - Field: user_administrator_rights
      Type: ChatAdministratorRights
      Description: Optional. A JSON-serialized object listing the required administrator rights of the user in the chat. The rights must be a superset of bot_administrator_rights. If not specified, no additional restrictions are applied.
    - Field: bot_administrator_rights
      Type: ChatAdministratorRights
      Description: Optional. A JSON-serialized object listing the required administrator rights of the bot in the chat. The rights must be a subset of user_administrator_rights. If not specified, no additional restrictions are applied.
    - Field: bot_is_member
      Type: Boolean
      Description: Optional. Pass True to request a chat with the bot as a member. Otherwise, no additional restrictions are applied.
  - name: KeyboardButtonPollType
    children: []
    desc:
    - name: p
      content: This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.
    table:
    - Field: type
      Type: String
      Description: Optional. If quiz is passed, the user will be allowed to create only polls in the quiz mode. If regular is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type.
  - name: ReplyKeyboardRemove
    children: []
    desc:
    - name: p
      content: Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see ReplyKeyboardMarkup).
    table:
    - Field: remove_keyboard
      Type: 'True'
      Description: Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use one_time_keyboard in ReplyKeyboardMarkup)
    - Field: selective
      Type: Boolean
      Description: 'Optional. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot''s message is a reply (has reply_to_message_id), sender of the original message.Example: A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven''t voted yet.'
  - name: InlineKeyboardMarkup
    children: []
    desc:
    - name: p
      content: This object represents an inline keyboard that appears right next to the message it belongs to.
    - name: p
      content: 'Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will display unsupported message.'
    table:
    - Field: inline_keyboard
      Type: Array of Array of InlineKeyboardButton
      Description: Array of button rows, each represented by an Array of InlineKeyboardButton objects
  - name: InlineKeyboardButton
    children: []
    desc:
    - name: p
      content: This object represents one button of an inline keyboard. You must use exactly one of the optional fields.
    table:
    - Field: text
      Type: String
      Description: Label text on the button
    - Field: url
      Type: String
      Description: Optional. HTTP or tg:// URL to be opened when the button is pressed. Links tg://user?id=<user_id> can be used to mention a user by their ID without using a username, if this is allowed by their privacy settings.
    - Field: callback_data
      Type: String
      Description: Optional. Data to be sent in a callback query to the bot when button is pressed, 1-64 bytes
    - Field: web_app
      Type: WebAppInfo
      Description: Optional. Description of the Web App that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method answerWebAppQuery. Available only in private chats between a user and the bot.
    - Field: login_url
      Type: LoginUrl
      Description: Optional. An HTTPS URL used to automatically authorize the user. Can be used as a replacement for the Telegram Login Widget.
    - Field: switch_inline_query
      Type: String
      Description: 'Optional. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot''s username and the specified inline query in the input field. May be empty, in which case just the bot''s username will be inserted.Note: This offers an easy way for users to start using your bot in inline mode when they are currently in a private chat with it. Especially useful when combined with switch_pmâ¦ actions - in this case the user will be automatically returned to the chat they switched from, skipping the chat selection screen.'
    - Field: switch_inline_query_current_chat
      Type: String
      Description: Optional. If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. May be empty, in which case only the bot's username will be inserted.This offers a quick way for the user to open your bot in inline mode in the same chat - good for selecting something from multiple options.
    - Field: callback_game
      Type: CallbackGame
      Description: 'Optional. Description of the game that will be launched when the user presses the button.NOTE: This type of button must always be the first button in the first row.'
    - Field: pay
      Type: Boolean
      Description: 'Optional. Specify True, to send a Pay button.NOTE: This type of button must always be the first button in the first row and can only be used in invoice messages.'
  - name: LoginUrl
    children: []
    desc:
    - name: p
      content: 'This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the Telegram Login Widget when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in:'
    - name: p
      content: Telegram apps support these buttons as of version 5.7.
    - name: blockquote
      content: 'Sample bot: @discussbot'
    table:
    - Field: url
      Type: String
      Description: 'An HTTPS URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in Receiving authorization data.NOTE: You must always check the hash of the received data to verify the authentication and the integrity of the data as described in Checking authorization.'
    - Field: forward_text
      Type: String
      Description: Optional. New text of the button in forwarded messages.
    - Field: bot_username
      Type: String
      Description: Optional. Username of a bot, which will be used for user authorization. See Setting up a bot for more details. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See Linking your domain to the bot for more details.
    - Field: request_write_access
      Type: Boolean
      Description: Optional. Pass True to request the permission for your bot to send messages to the user.
  - name: CallbackQuery
    children: []
    desc:
    - name: p
      content: This object represents an incoming callback query from a callback button in an inline keyboard. If the button that originated the query was attached to a message sent by the bot, the field message will be present. If the button was attached to a message sent via the bot (in inline mode), the field inline_message_id will be present. Exactly one of the fields data or game_short_name will be present.
    - name: blockquote
      content: 'NOTE: After the user presses a callback button, Telegram clients will display a progress bar until you call answerCallbackQuery. It is, therefore, necessary to react by calling answerCallbackQuery even if no notification to the user is needed (e.g., without specifying any of the optional parameters).'
    table:
    - Field: id
      Type: String
      Description: Unique identifier for this query
    - Field: from
      Type: User
      Description: Sender
    - Field: message
      Type: Message
      Description: Optional. Message with the callback button that originated the query. Note that message content and message date will not be available if the message is too old
    - Field: inline_message_id
      Type: String
      Description: Optional. Identifier of the message sent via the bot in inline mode, that originated the query.
    - Field: chat_instance
      Type: String
      Description: Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games.
    - Field: data
      Type: String
      Description: Optional. Data associated with the callback button. Be aware that the message originated the query can contain no callback buttons with this data.
    - Field: game_short_name
      Type: String
      Description: Optional. Short name of a Game to be returned, serves as the unique identifier for the game
  - name: ForceReply
    children: []
    desc:
    - name: p
      content: Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice privacy mode.
    - name: blockquote
      content: |-
        Example: A poll bot for groups runs in privacy mode (only receives commands, replies to its messages and mentions). There could be two ways to create a new poll:

        Explain the user how to send a command with parameters (e.g. /newpoll question answer1 answer2). May be appealing for hardcore users but lacks modern day polish.
        Guide the user through a step-by-step process. 'Please send me your question', 'Cool, now let's add the first answer option', 'Great. Keep adding answer options, then send /done when you're ready'.

        The last option is definitely more attractive. And if you use ForceReply in your bot's questions, it will receive the user's answers even if it only receives replies, commands and mentions - without any extra work for the user.
    table:
    - Field: force_reply
      Type: 'True'
      Description: Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'
    - Field: input_field_placeholder
      Type: String
      Description: Optional. The placeholder to be shown in the input field when the reply is active; 1-64 characters
    - Field: selective
      Type: Boolean
      Description: 'Optional. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot''s message is a reply (has reply_to_message_id), sender of the original message.'
  - name: ChatPhoto
    children: []
    desc:
    - name: p
      content: This object represents a chat photo.
    table:
    - Field: small_file_id
      Type: String
      Description: File identifier of small (160x160) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed.
    - Field: small_file_unique_id
      Type: String
      Description: Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    - Field: big_file_id
      Type: String
      Description: File identifier of big (640x640) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed.
    - Field: big_file_unique_id
      Type: String
      Description: Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
  - name: ChatInviteLink
    children: []
    desc:
    - name: p
      content: Represents an invite link for a chat.
    table:
    - Field: invite_link
      Type: String
      Description: The invite link. If the link was created by another chat administrator, then the second part of the link will be replaced with ââ¦â.
    - Field: creator
      Type: User
      Description: Creator of the link
    - Field: creates_join_request
      Type: Boolean
      Description: True, if users joining the chat via the link need to be approved by chat administrators
    - Field: is_primary
      Type: Boolean
      Description: True, if the link is primary
    - Field: is_revoked
      Type: Boolean
      Description: True, if the link is revoked
    - Field: name
      Type: String
      Description: Optional. Invite link name
    - Field: expire_date
      Type: Integer
      Description: Optional. Point in time (Unix timestamp) when the link will expire or has been expired
    - Field: member_limit
      Type: Integer
      Description: Optional. The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999
    - Field: pending_join_request_count
      Type: Integer
      Description: Optional. Number of pending join requests created using this link
  - name: ChatAdministratorRights
    children: []
    desc:
    - name: p
      content: Represents the rights of an administrator in a chat.
    table:
    - Field: is_anonymous
      Type: Boolean
      Description: True, if the user's presence in the chat is hidden
    - Field: can_manage_chat
      Type: Boolean
      Description: True, if the administrator can access the chat event log, chat statistics, message statistics in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode. Implied by any other administrator privilege
    - Field: can_delete_messages
      Type: Boolean
      Description: True, if the administrator can delete messages of other users
    - Field: can_manage_video_chats
      Type: Boolean
      Description: True, if the administrator can manage video chats
    - Field: can_restrict_members
      Type: Boolean
      Description: True, if the administrator can restrict, ban or unban chat members
    - Field: can_promote_members
      Type: Boolean
      Description: True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user)
    - Field: can_change_info
      Type: Boolean
      Description: True, if the user is allowed to change the chat title, photo and other settings
    - Field: can_invite_users
      Type: Boolean
      Description: True, if the user is allowed to invite new users to the chat
    - Field: can_post_messages
      Type: Boolean
      Description: Optional. True, if the administrator can post in the channel; channels only
    - Field: can_edit_messages
      Type: Boolean
      Description: Optional. True, if the administrator can edit messages of other users and can pin messages; channels only
    - Field: can_pin_messages
      Type: Boolean
      Description: Optional. True, if the user is allowed to pin messages; groups and supergroups only
    - Field: can_manage_topics
      Type: Boolean
      Description: Optional. True, if the user is allowed to create, rename, close, and reopen forum topics; supergroups only
  - name: ChatMember
    children: []
    desc:
    - name: p
      content: 'This object contains information about one member of a chat. Currently, the following 6 types of chat members are supported:'
    - name: ul
      content:
      - ChatMemberOwner
      - ChatMemberAdministrator
      - ChatMemberMember
      - ChatMemberRestricted
      - ChatMemberLeft
      - ChatMemberBanned
  - name: ChatMemberOwner
    children: []
    desc:
    - name: p
      content: Represents a chat member that owns the chat and has all administrator privileges.
    table:
    - Field: status
      Type: String
      Description: The member's status in the chat, always âcreatorâ
    - Field: user
      Type: User
      Description: Information about the user
    - Field: is_anonymous
      Type: Boolean
      Description: True, if the user's presence in the chat is hidden
    - Field: custom_title
      Type: String
      Description: Optional. Custom title for this user
  - name: ChatMemberAdministrator
    children: []
    desc:
    - name: p
      content: Represents a chat member that has some additional privileges.
    table:
    - Field: status
      Type: String
      Description: The member's status in the chat, always âadministratorâ
    - Field: user
      Type: User
      Description: Information about the user
    - Field: can_be_edited
      Type: Boolean
      Description: True, if the bot is allowed to edit administrator privileges of that user
    - Field: is_anonymous
      Type: Boolean
      Description: True, if the user's presence in the chat is hidden
    - Field: can_manage_chat
      Type: Boolean
      Description: True, if the administrator can access the chat event log, chat statistics, message statistics in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode. Implied by any other administrator privilege
    - Field: can_delete_messages
      Type: Boolean
      Description: True, if the administrator can delete messages of other users
    - Field: can_manage_video_chats
      Type: Boolean
      Description: True, if the administrator can manage video chats
    - Field: can_restrict_members
      Type: Boolean
      Description: True, if the administrator can restrict, ban or unban chat members
    - Field: can_promote_members
      Type: Boolean
      Description: True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user)
    - Field: can_change_info
      Type: Boolean
      Description: True, if the user is allowed to change the chat title, photo and other settings
    - Field: can_invite_users
      Type: Boolean
      Description: True, if the user is allowed to invite new users to the chat
    - Field: can_post_messages
      Type: Boolean
      Description: Optional. True, if the administrator can post in the channel; channels only
    - Field: can_edit_messages
      Type: Boolean
      Description: Optional. True, if the administrator can edit messages of other users and can pin messages; channels only
    - Field: can_pin_messages
      Type: Boolean
      Description: Optional. True, if the user is allowed to pin messages; groups and supergroups only
    - Field: can_manage_topics
      Type: Boolean
      Description: Optional. True, if the user is allowed to create, rename, close, and reopen forum topics; supergroups only
    - Field: custom_title
      Type: String
      Description: Optional. Custom title for this user
  - name: ChatMemberMember
    children: []
    desc:
    - name: p
      content: Represents a chat member that has no additional privileges or restrictions.
    table:
    - Field: status
      Type: String
      Description: The member's status in the chat, always âmemberâ
    - Field: user
      Type: User
      Description: Information about the user
  - name: ChatMemberRestricted
    children: []
    desc:
    - name: p
      content: Represents a chat member that is under certain restrictions in the chat. Supergroups only.
    table:
    - Field: status
      Type: String
      Description: The member's status in the chat, always ârestrictedâ
    - Field: user
      Type: User
      Description: Information about the user
    - Field: is_member
      Type: Boolean
      Description: True, if the user is a member of the chat at the moment of the request
    - Field: can_send_messages
      Type: Boolean
      Description: True, if the user is allowed to send text messages, contacts, invoices, locations and venues
    - Field: can_send_audios
      Type: Boolean
      Description: True, if the user is allowed to send audios
    - Field: can_send_documents
      Type: Boolean
      Description: True, if the user is allowed to send documents
    - Field: can_send_photos
      Type: Boolean
      Description: True, if the user is allowed to send photos
    - Field: can_send_videos
      Type: Boolean
      Description: True, if the user is allowed to send videos
    - Field: can_send_video_notes
      Type: Boolean
      Description: True, if the user is allowed to send video notes
    - Field: can_send_voice_notes
      Type: Boolean
      Description: True, if the user is allowed to send voice notes
    - Field: can_send_polls
      Type: Boolean
      Description: True, if the user is allowed to send polls
    - Field: can_send_other_messages
      Type: Boolean
      Description: True, if the user is allowed to send animations, games, stickers and use inline bots
    - Field: can_add_web_page_previews
      Type: Boolean
      Description: True, if the user is allowed to add web page previews to their messages
    - Field: can_change_info
      Type: Boolean
      Description: True, if the user is allowed to change the chat title, photo and other settings
    - Field: can_invite_users
      Type: Boolean
      Description: True, if the user is allowed to invite new users to the chat
    - Field: can_pin_messages
      Type: Boolean
      Description: True, if the user is allowed to pin messages
    - Field: can_manage_topics
      Type: Boolean
      Description: True, if the user is allowed to create forum topics
    - Field: until_date
      Type: Integer
      Description: Date when restrictions will be lifted for this user; unix time. If 0, then the user is restricted forever
  - name: ChatMemberLeft
    children: []
    desc:
    - name: p
      content: Represents a chat member that isn't currently a member of the chat, but may join it themselves.
    table:
    - Field: status
      Type: String
      Description: The member's status in the chat, always âleftâ
    - Field: user
      Type: User
      Description: Information about the user
  - name: ChatMemberBanned
    children: []
    desc:
    - name: p
      content: Represents a chat member that was banned in the chat and can't return to the chat or view chat messages.
    table:
    - Field: status
      Type: String
      Description: The member's status in the chat, always âkickedâ
    - Field: user
      Type: User
      Description: Information about the user
    - Field: until_date
      Type: Integer
      Description: Date when restrictions will be lifted for this user; unix time. If 0, then the user is banned forever
  - name: ChatMemberUpdated
    children: []
    desc:
    - name: p
      content: This object represents changes in the status of a chat member.
    table:
    - Field: chat
      Type: Chat
      Description: Chat the user belongs to
    - Field: from
      Type: User
      Description: Performer of the action, which resulted in the change
    - Field: date
      Type: Integer
      Description: Date the change was done in Unix time
    - Field: old_chat_member
      Type: ChatMember
      Description: Previous information about the chat member
    - Field: new_chat_member
      Type: ChatMember
      Description: New information about the chat member
    - Field: invite_link
      Type: ChatInviteLink
      Description: Optional. Chat invite link, which was used by the user to join the chat; for joining by invite link events only.
  - name: ChatJoinRequest
    children: []
    desc:
    - name: p
      content: Represents a join request sent to a chat.
    table:
    - Field: chat
      Type: Chat
      Description: Chat to which the request was sent
    - Field: from
      Type: User
      Description: User that sent the join request
    - Field: user_chat_id
      Type: Integer
      Description: Identifier of a private chat with the user who sent the join request. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. The bot can use this identifier for 24 hours to send messages until the join request is processed, assuming no other administrator contacted the user.
    - Field: date
      Type: Integer
      Description: Date the request was sent in Unix time
    - Field: bio
      Type: String
      Description: Optional. Bio of the user.
    - Field: invite_link
      Type: ChatInviteLink
      Description: Optional. Chat invite link that was used by the user to send the join request
  - name: ChatPermissions
    children: []
    desc:
    - name: p
      content: Describes actions that a non-administrator user is allowed to take in a chat.
    table:
    - Field: can_send_messages
      Type: Boolean
      Description: Optional. True, if the user is allowed to send text messages, contacts, invoices, locations and venues
    - Field: can_send_audios
      Type: Boolean
      Description: Optional. True, if the user is allowed to send audios
    - Field: can_send_documents
      Type: Boolean
      Description: Optional. True, if the user is allowed to send documents
    - Field: can_send_photos
      Type: Boolean
      Description: Optional. True, if the user is allowed to send photos
    - Field: can_send_videos
      Type: Boolean
      Description: Optional. True, if the user is allowed to send videos
    - Field: can_send_video_notes
      Type: Boolean
      Description: Optional. True, if the user is allowed to send video notes
    - Field: can_send_voice_notes
      Type: Boolean
      Description: Optional. True, if the user is allowed to send voice notes
    - Field: can_send_polls
      Type: Boolean
      Description: Optional. True, if the user is allowed to send polls
    - Field: can_send_other_messages
      Type: Boolean
      Description: Optional. True, if the user is allowed to send animations, games, stickers and use inline bots
    - Field: can_add_web_page_previews
      Type: Boolean
      Description: Optional. True, if the user is allowed to add web page previews to their messages
    - Field: can_change_info
      Type: Boolean
      Description: Optional. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups
    - Field: can_invite_users
      Type: Boolean
      Description: Optional. True, if the user is allowed to invite new users to the chat
    - Field: can_pin_messages
      Type: Boolean
      Description: Optional. True, if the user is allowed to pin messages. Ignored in public supergroups
    - Field: can_manage_topics
      Type: Boolean
      Description: Optional. True, if the user is allowed to create forum topics. If omitted defaults to the value of can_pin_messages
  - name: ChatLocation
    children: []
    desc:
    - name: p
      content: Represents a location to which a chat is connected.
    table:
    - Field: location
      Type: Location
      Description: The location to which the supergroup is connected. Can't be a live location.
    - Field: address
      Type: String
      Description: Location address; 1-64 characters, as defined by the chat owner
  - name: ForumTopic
    children: []
    desc:
    - name: p
      content: This object represents a forum topic.
    table:
    - Field: message_thread_id
      Type: Integer
      Description: Unique identifier of the forum topic
    - Field: name
      Type: String
      Description: Name of the topic
    - Field: icon_color
      Type: Integer
      Description: Color of the topic icon in RGB format
    - Field: icon_custom_emoji_id
      Type: String
      Description: Optional. Unique identifier of the custom emoji shown as the topic icon
  - name: BotCommand
    children: []
    desc:
    - name: p
      content: This object represents a bot command.
    table:
    - Field: command
      Type: String
      Description: Text of the command; 1-32 characters. Can contain only lowercase English letters, digits and underscores.
    - Field: description
      Type: String
      Description: Description of the command; 1-256 characters.
  - name: BotCommandScope
    children: []
    desc:
    - name: p
      content: 'This object represents the scope to which bot commands are applied. Currently, the following 7 scopes are supported:'
    - name: ul
      content:
      - BotCommandScopeDefault
      - BotCommandScopeAllPrivateChats
      - BotCommandScopeAllGroupChats
      - BotCommandScopeAllChatAdministrators
      - BotCommandScopeChat
      - BotCommandScopeChatAdministrators
      - BotCommandScopeChatMember
  - name: Determining list of commands
    children: []
    desc:
    - name: p
      content: 'The following algorithm is used to determine the list of commands for a particular user viewing the bot menu. The first list of commands which is set is returned:'
    - name: p
      content: Commands in the chat with the bot
    - name: ul
      content:
      - botCommandScopeChat + language_code
      - botCommandScopeChat
      - botCommandScopeAllPrivateChats + language_code
      - botCommandScopeAllPrivateChats
      - botCommandScopeDefault + language_code
      - botCommandScopeDefault
    - name: p
      content: Commands in group and supergroup chats
    - name: ul
      content:
      - botCommandScopeChatMember + language_code
      - botCommandScopeChatMember
      - botCommandScopeChatAdministrators + language_code (administrators only)
      - botCommandScopeChatAdministrators (administrators only)
      - botCommandScopeChat + language_code
      - botCommandScopeChat
      - botCommandScopeAllChatAdministrators + language_code (administrators only)
      - botCommandScopeAllChatAdministrators (administrators only)
      - botCommandScopeAllGroupChats + language_code
      - botCommandScopeAllGroupChats
      - botCommandScopeDefault + language_code
      - botCommandScopeDefault
  - name: BotCommandScopeDefault
    children: []
    desc:
    - name: p
      content: Represents the default scope of bot commands. Default commands are used if no commands with a narrower scope are specified for the user.
    table:
    - Field: type
      Type: String
      Description: Scope type, must be default
  - name: BotCommandScopeAllPrivateChats
    children: []
    desc:
    - name: p
      content: Represents the scope of bot commands, covering all private chats.
    table:
    - Field: type
      Type: String
      Description: Scope type, must be all_private_chats
  - name: BotCommandScopeAllGroupChats
    children: []
    desc:
    - name: p
      content: Represents the scope of bot commands, covering all group and supergroup chats.
    table:
    - Field: type
      Type: String
      Description: Scope type, must be all_group_chats
  - name: BotCommandScopeAllChatAdministrators
    children: []
    desc:
    - name: p
      content: Represents the scope of bot commands, covering all group and supergroup chat administrators.
    table:
    - Field: type
      Type: String
      Description: Scope type, must be all_chat_administrators
  - name: BotCommandScopeChat
    children: []
    desc:
    - name: p
      content: Represents the scope of bot commands, covering a specific chat.
    table:
    - Field: type
      Type: String
      Description: Scope type, must be chat
    - Field: chat_id
      Type: Integer or String
      Description: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
  - name: BotCommandScopeChatAdministrators
    children: []
    desc:
    - name: p
      content: Represents the scope of bot commands, covering all administrators of a specific group or supergroup chat.
    table:
    - Field: type
      Type: String
      Description: Scope type, must be chat_administrators
    - Field: chat_id
      Type: Integer or String
      Description: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
  - name: BotCommandScopeChatMember
    children: []
    desc:
    - name: p
      content: Represents the scope of bot commands, covering a specific member of a group or supergroup chat.
    table:
    - Field: type
      Type: String
      Description: Scope type, must be chat_member
    - Field: chat_id
      Type: Integer or String
      Description: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
    - Field: user_id
      Type: Integer
      Description: Unique identifier of the target user
  - name: BotDescription
    children: []
    desc:
    - name: p
      content: This object represents the bot's description.
    table:
    - Field: description
      Type: String
      Description: The bot's description
  - name: BotShortDescription
    children: []
    desc:
    - name: p
      content: This object represents the bot's short description.
    table:
    - Field: short_description
      Type: String
      Description: The bot's short description
  - name: MenuButton
    children: []
    desc:
    - name: p
      content: This object describes the bot's menu button in a private chat. It should be one of
    - name: ul
      content:
      - MenuButtonCommands
      - MenuButtonWebApp
      - MenuButtonDefault
    - name: p
      content: If a menu button other than MenuButtonDefault is set for a private chat, then it is applied in the chat. Otherwise the default menu button is applied. By default, the menu button opens the list of bot commands.
  - name: MenuButtonCommands
    children: []
    desc:
    - name: p
      content: Represents a menu button, which opens the bot's list of commands.
    table:
    - Field: type
      Type: String
      Description: Type of the button, must be commands
  - name: MenuButtonWebApp
    children: []
    desc:
    - name: p
      content: Represents a menu button, which launches a Web App.
    table:
    - Field: type
      Type: String
      Description: Type of the button, must be web_app
    - Field: text
      Type: String
      Description: Text on the button
    - Field: web_app
      Type: WebAppInfo
      Description: Description of the Web App that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method answerWebAppQuery.
  - name: MenuButtonDefault
    children: []
    desc:
    - name: p
      content: Describes that no specific value for the menu button was set.
    table:
    - Field: type
      Type: String
      Description: Type of the button, must be default
  - name: ResponseParameters
    children: []
    desc:
    - name: p
      content: Describes why a request was unsuccessful.
    table:
    - Field: migrate_to_chat_id
      Type: Integer
      Description: Optional. The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
    - Field: retry_after
      Type: Integer
      Description: Optional. In case of exceeding flood control, the number of seconds left to wait before the request can be repeated
  - name: InputMedia
    children: []
    desc:
    - name: p
      content: This object represents the content of a media message to be sent. It should be one of
    - name: ul
      content:
      - InputMediaAnimation
      - InputMediaDocument
      - InputMediaAudio
      - InputMediaPhoto
      - InputMediaVideo
  - name: InputMediaPhoto
    children: []
    desc:
    - name: p
      content: Represents a photo to be sent.
    table:
    - Field: type
      Type: String
      Description: Type of the result, must be photo
    - Field: media
      Type: String
      Description: File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass âattach://<file_attach_name>â to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files Â»
    - Field: caption
      Type: String
      Description: Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing
    - Field: parse_mode
      Type: String
      Description: Optional. Mode for parsing entities in the photo caption. See formatting options for more details.
    - Field: caption_entities
      Type: Array of MessageEntity
      Description: Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
    - Field: has_spoiler
      Type: Boolean
      Description: Optional. Pass True if the photo needs to be covered with a spoiler animation
  - name: InputMediaVideo
    children: []
    desc:
    - name: p
      content: Represents a video to be sent.
    table:
    - Field: type
      Type: String
      Description: Type of the result, must be video
    - Field: media
      Type: String
      Description: File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass âattach://<file_attach_name>â to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files Â»
    - Field: thumbnail
      Type: InputFile or String
      Description: Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass âattach://<file_attach_name>â if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files Â»
    - Field: caption
      Type: String
      Description: Optional. Caption of the video to be sent, 0-1024 characters after entities parsing
    - Field: parse_mode
      Type: String
      Description: Optional. Mode for parsing entities in the video caption. See formatting options for more details.
    - Field: caption_entities
      Type: Array of MessageEntity
      Description: Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
    - Field: width
      Type: Integer
      Description: Optional. Video width
    - Field: height
      Type: Integer
      Description: Optional. Video height
    - Field: duration
      Type: Integer
      Description: Optional. Video duration in seconds
    - Field: supports_streaming
      Type: Boolean
      Description: Optional. Pass True if the uploaded video is suitable for streaming
    - Field: has_spoiler
      Type: Boolean
      Description: Optional. Pass True if the video needs to be covered with a spoiler animation
  - name: InputMediaAnimation
    children: []
    desc:
    - name: p
      content: Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.
    table:
    - Field: type
      Type: String
      Description: Type of the result, must be animation
    - Field: media
      Type: String
      Description: File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass âattach://<file_attach_name>â to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files Â»
    - Field: thumbnail
      Type: InputFile or String
      Description: Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass âattach://<file_attach_name>â if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files Â»
    - Field: caption
      Type: String
      Description: Optional. Caption of the animation to be sent, 0-1024 characters after entities parsing
    - Field: parse_mode
      Type: String
      Description: Optional. Mode for parsing entities in the animation caption. See formatting options for more details.
    - Field: caption_entities
      Type: Array of MessageEntity
      Description: Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
    - Field: width
      Type: Integer
      Description: Optional. Animation width
    - Field: height
      Type: Integer
      Description: Optional. Animation height
    - Field: duration
      Type: Integer
      Description: Optional. Animation duration in seconds
    - Field: has_spoiler
      Type: Boolean
      Description: Optional. Pass True if the animation needs to be covered with a spoiler animation
  - name: InputMediaAudio
    children: []
    desc:
    - name: p
      content: Represents an audio file to be treated as music to be sent.
    table:
    - Field: type
      Type: String
      Description: Type of the result, must be audio
    - Field: media
      Type: String
      Description: File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass âattach://<file_attach_name>â to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files Â»
    - Field: thumbnail
      Type: InputFile or String
      Description: Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass âattach://<file_attach_name>â if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files Â»
    - Field: caption
      Type: String
      Description: Optional. Caption of the audio to be sent, 0-1024 characters after entities parsing
    - Field: parse_mode
      Type: String
      Description: Optional. Mode for parsing entities in the audio caption. See formatting options for more details.
    - Field: caption_entities
      Type: Array of MessageEntity
      Description: Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
    - Field: duration
      Type: Integer
      Description: Optional. Duration of the audio in seconds
    - Field: performer
      Type: String
      Description: Optional. Performer of the audio
    - Field: title
      Type: String
      Description: Optional. Title of the audio
  - name: InputMediaDocument
    children: []
    desc:
    - name: p
      content: Represents a general file to be sent.
    table:
    - Field: type
      Type: String
      Description: Type of the result, must be document
    - Field: media
      Type: String
      Description: File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass âattach://<file_attach_name>â to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files Â»
    - Field: thumbnail
      Type: InputFile or String
      Description: Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass âattach://<file_attach_name>â if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files Â»
    - Field: caption
      Type: String
      Description: Optional. Caption of the document to be sent, 0-1024 characters after entities parsing
    - Field: parse_mode
      Type: String
      Description: Optional. Mode for parsing entities in the document caption. See formatting options for more details.
    - Field: caption_entities
      Type: Array of MessageEntity
      Description: Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
    - Field: disable_content_type_detection
      Type: Boolean
      Description: Optional. Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always True, if the document is sent as part of an album.
  - name: InputFile
    children: []
    desc:
    - name: p
      content: This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.
  - name: Sending files
    children: []
    desc:
    - name: p
      content: 'There are three ways to send files (photos, stickers, audio, media, etc.):'
    - name: ol
      content:
      - 'If the file is already stored somewhere on the Telegram servers, you don''t need to reupload it: each file object has a file_id field, simply pass this file_id as a parameter instead of uploading. There are no limits for files sent this way.'
      - Provide Telegram with an HTTP URL for the file to be sent. Telegram will download and send the file. 5 MB max size for photos and 20 MB max for other types of content.
      - Post the file using multipart/form-data in the usual way that files are uploaded via the browser. 10 MB max size for photos, 50 MB for other files.
    - name: p
      content: Sending by file_id
    - name: ul
      content:
      - It is not possible to change the file type when resending by file_id. I.e. a video can't be sent as a photo, a photo can't be sent as a document, etc.
      - It is not possible to resend thumbnails.
      - Resending a photo by file_id will send all of its sizes.
      - file_id is unique for each individual bot and can't be transferred from one bot to another.
      - file_id uniquely identifies a file, but a file can have different valid file_ids even for the same bot.
    - name: p
      content: Sending by URL
    - name: ul
      content:
      - When sending by URL the target file must have the correct MIME type (e.g., audio/mpeg for sendAudio, etc.).
      - In sendDocument, sending by URL will currently only work for GIF, PDF and ZIP files.
      - To use sendVoice, the file must have the type audio/ogg and be no more than 1MB in size. 1-20MB voice notes will be sent as files.
      - Other configurations may work but we can't guarantee that they will.
  - name: Inline mode objects
    children: []
    desc:
    - name: p
      content: Objects and methods used in the inline mode are described in the Inline mode section.
  desc:
  - name: p
    content: All types used in the Bot API responses are represented as JSON-objects.
  - name: p
    content: It is safe to use 32-bit signed integers for storing all Integer fields unless otherwise noted.
  - name: blockquote
    content: Optional fields may be not returned when irrelevant.
- name: Available methods
  children:
  - name: getMe
    children: []
    desc:
    - name: p
      content: A simple method for testing your bot's authentication token. Requires no parameters. Returns basic information about the bot in form of a User object.
  - name: logOut
    children: []
    desc:
    - name: p
      content: Use this method to log out from the cloud Bot API server before launching the bot locally. You must log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns True on success. Requires no parameters.
  - name: close
    children: []
    desc:
    - name: p
      content: Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns True on success. Requires no parameters.
  - name: sendMessage
    children: []
    desc:
    - name: p
      content: Use this method to send text messages. On success, the sent Message is returned.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_thread_id
      Type: Integer
      Required: Optional
      Description: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
    - Parameter: text
      Type: String
      Required: 'Yes'
      Description: Text of the message to be sent, 1-4096 characters after entities parsing
    - Parameter: parse_mode
      Type: String
      Required: Optional
      Description: Mode for parsing entities in the message text. See formatting options for more details.
    - Parameter: entities
      Type: Array of MessageEntity
      Required: Optional
      Description: A JSON-serialized list of special entities that appear in message text, which can be specified instead of parse_mode
    - Parameter: disable_web_page_preview
      Type: Boolean
      Required: Optional
      Description: Disables link previews for links in this message
    - Parameter: disable_notification
      Type: Boolean
      Required: Optional
      Description: Sends the message silently. Users will receive a notification with no sound.
    - Parameter: protect_content
      Type: Boolean
      Required: Optional
      Description: Protects the contents of the sent message from forwarding and saving
    - Parameter: reply_to_message_id
      Type: Integer
      Required: Optional
      Description: If the message is a reply, ID of the original message
    - Parameter: allow_sending_without_reply
      Type: Boolean
      Required: Optional
      Description: Pass True if the message should be sent even if the specified replied-to message is not found
    - Parameter: reply_markup
      Type: InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
      Required: Optional
      Description: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
  - name: Formatting options
    children: []
    desc:
    - name: p
      content: The Bot API supports basic formatting for messages. You can use bold, italic, underlined, strikethrough, and spoiler text, as well as inline links and pre-formatted code in your bots' messages. Telegram clients will render them accordingly. You can specify text entities directly, or use markdown-style or HTML-style formatting.
    - name: p
      content: Note that Telegram clients will display an alert to the user before opening an inline link ('Open this link?' together with the full URL).
    - name: p
      content: Message entities can be nested, providing following restrictions are met:- If two entities have common characters, then one of them is fully contained inside another.- bold, italic, underline, strikethrough, and spoiler entities can contain and can be part of any other entities, except pre and code.- All other entities can't contain each other.
    - name: p
      content: 'Links tg://user?id=<user_id> can be used to mention a user by their ID without using a username. Please note:'
    - name: ul
      content:
      - These links will work only if they are used inside an inline link or in an inline keyboard button. For example, they will not work, when used in a message text.
      - Unless the user is a member of the chat where they were mentioned, these mentions are only guaranteed to work if the user has contacted the bot in private in the past or has sent a callback query to the bot via an inline button and doesn't have Forwarded Messages privacy enabled for the bot.
    - name: h6
      content: MarkdownV2 style
    - name: p
      content: 'To use this mode, pass MarkdownV2 in the parse_mode field. Use the following syntax in your message:'
    - name: pre
      content: |-
        *bold \*text*
        _italic \*text_
        __underline__
        ~strikethrough~
        ||spoiler||
        *bold _italic bold ~italic bold strikethrough ||italic bold strikethrough spoiler||~ __underline italic bold___ bold*
        [inline URL](http://www.example.com/)
        [inline mention of a user](tg://user?id=123456789)
        `inline fixed-width code`
        ```
        pre-formatted fixed-width code block
        ```
        ```python
        pre-formatted fixed-width code block written in the Python programming language
        ```
    - name: p
      content: 'Please note:'
    - name: ul
      content:
      - Any character with code between 1 and 126 inclusively can be escaped anywhere with a preceding '\' character, in which case it is treated as an ordinary character and not a part of the markup. This implies that '\' character usually must be escaped with a preceding '\' character.
      - Inside pre and code entities, all '`' and '\' characters must be escaped with a preceding '\' character.
      - Inside (...) part of inline link definition, all ')' and '\' must be escaped with a preceding '\' character.
      - In all other places characters '_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!' must be escaped with the preceding character '\'.
      - In case of ambiguity between italic and underline entities __ is always greadily treated from left to right as beginning or end of underline entity, so instead of ___italic underline___ use ___italic underline_\r__, where \r is a character with code 13, which will be ignored.
    - name: h6
      content: HTML style
    - name: p
      content: 'To use this mode, pass HTML in the parse_mode field. The following tags are currently supported:'
    - name: pre
      content: |-
        <b>bold</b>, <strong>bold</strong>
        <i>italic</i>, <em>italic</em>
        <u>underline</u>, <ins>underline</ins>
        <s>strikethrough</s>, <strike>strikethrough</strike>, <del>strikethrough</del>
        <span class="tg-spoiler">spoiler</span>, <tg-spoiler>spoiler</tg-spoiler>
        <b>bold <i>italic bold <s>italic bold strikethrough <span class="tg-spoiler">italic bold strikethrough spoiler</span></s> <u>underline italic bold</u></i> bold</b>
        <a href="http://www.example.com/">inline URL</a>
        <a href="tg://user?id=123456789">inline mention of a user</a>
        <code>inline fixed-width code</code>
        <pre>pre-formatted fixed-width code block</pre>
        <pre><code class="language-python">pre-formatted fixed-width code block written in the Python programming language</code></pre>
    - name: p
      content: 'Please note:'
    - name: ul
      content:
      - Only the tags mentioned above are currently supported.
      - All <, > and & symbols that are not a part of a tag or an HTML entity must be replaced with the corresponding HTML entities (< with &lt;, > with &gt; and & with &amp;).
      - All numerical HTML entities are supported.
      - 'The API currently supports only the following named HTML entities: &lt;, &gt;, &amp; and &quot;.'
      - Use nested pre and code tags, to define programming language for pre entity.
      - Programming language can't be specified for standalone code tags.
    - name: h6
      content: Markdown style
    - name: p
      content: 'This is a legacy mode, retained for backward compatibility. To use this mode, pass Markdown in the parse_mode field. Use the following syntax in your message:'
    - name: pre
      content: |-
        *bold text*
        _italic text_
        [inline URL](http://www.example.com/)
        [inline mention of a user](tg://user?id=123456789)
        `inline fixed-width code`
        ```
        pre-formatted fixed-width code block
        ```
        ```python
        pre-formatted fixed-width code block written in the Python programming language
        ```
    - name: p
      content: 'Please note:'
    - name: ul
      content:
      - Entities must not be nested, use parse mode MarkdownV2 instead.
      - There is no way to specify underline and strikethrough entities, use parse mode MarkdownV2 instead.
      - To escape characters '_', '*', '`', '[' outside of an entity, prepend the characters '\' before them.
      - 'Escaping inside entities is not allowed, so entity must be closed first and reopened again: use _snake_\__case_ for italic snake_case and *2*\**2=4* for bold 2*2=4.'
  - name: forwardMessage
    children: []
    desc:
    - name: p
      content: Use this method to forward messages of any kind. Service messages can't be forwarded. On success, the sent Message is returned.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_thread_id
      Type: Integer
      Required: Optional
      Description: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
    - Parameter: from_chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)
    - Parameter: disable_notification
      Type: Boolean
      Required: Optional
      Description: Sends the message silently. Users will receive a notification with no sound.
    - Parameter: protect_content
      Type: Boolean
      Required: Optional
      Description: Protects the contents of the forwarded message from forwarding and saving
    - Parameter: message_id
      Type: Integer
      Required: 'Yes'
      Description: Message identifier in the chat specified in from_chat_id
  - name: copyMessage
    children: []
    desc:
    - name: p
      content: Use this method to copy messages of any kind. Service messages and invoice messages can't be copied. A quiz poll can be copied only if the value of the field correct_option_id is known to the bot. The method is analogous to the method forwardMessage, but the copied message doesn't have a link to the original message. Returns the MessageId of the sent message on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_thread_id
      Type: Integer
      Required: Optional
      Description: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
    - Parameter: from_chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)
    - Parameter: message_id
      Type: Integer
      Required: 'Yes'
      Description: Message identifier in the chat specified in from_chat_id
    - Parameter: caption
      Type: String
      Required: Optional
      Description: New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept
    - Parameter: parse_mode
      Type: String
      Required: Optional
      Description: Mode for parsing entities in the new caption. See formatting options for more details.
    - Parameter: caption_entities
      Type: Array of MessageEntity
      Required: Optional
      Description: A JSON-serialized list of special entities that appear in the new caption, which can be specified instead of parse_mode
    - Parameter: disable_notification
      Type: Boolean
      Required: Optional
      Description: Sends the message silently. Users will receive a notification with no sound.
    - Parameter: protect_content
      Type: Boolean
      Required: Optional
      Description: Protects the contents of the sent message from forwarding and saving
    - Parameter: reply_to_message_id
      Type: Integer
      Required: Optional
      Description: If the message is a reply, ID of the original message
    - Parameter: allow_sending_without_reply
      Type: Boolean
      Required: Optional
      Description: Pass True if the message should be sent even if the specified replied-to message is not found
    - Parameter: reply_markup
      Type: InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
      Required: Optional
      Description: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
  - name: sendPhoto
    children: []
    desc:
    - name: p
      content: Use this method to send photos. On success, the sent Message is returned.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_thread_id
      Type: Integer
      Required: Optional
      Description: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
    - Parameter: photo
      Type: InputFile or String
      Required: 'Yes'
      Description: Photo to send. Pass a file_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20. More information on Sending Files Â»
    - Parameter: caption
      Type: String
      Required: Optional
      Description: Photo caption (may also be used when resending photos by file_id), 0-1024 characters after entities parsing
    - Parameter: parse_mode
      Type: String
      Required: Optional
      Description: Mode for parsing entities in the photo caption. See formatting options for more details.
    - Parameter: caption_entities
      Type: Array of MessageEntity
      Required: Optional
      Description: A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode
    - Parameter: has_spoiler
      Type: Boolean
      Required: Optional
      Description: Pass True if the photo needs to be covered with a spoiler animation
    - Parameter: disable_notification
      Type: Boolean
      Required: Optional
      Description: Sends the message silently. Users will receive a notification with no sound.
    - Parameter: protect_content
      Type: Boolean
      Required: Optional
      Description: Protects the contents of the sent message from forwarding and saving
    - Parameter: reply_to_message_id
      Type: Integer
      Required: Optional
      Description: If the message is a reply, ID of the original message
    - Parameter: allow_sending_without_reply
      Type: Boolean
      Required: Optional
      Description: Pass True if the message should be sent even if the specified replied-to message is not found
    - Parameter: reply_markup
      Type: InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
      Required: Optional
      Description: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
  - name: sendAudio
    children: []
    desc:
    - name: p
      content: Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent Message is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.
    - name: p
      content: For sending voice messages, use the sendVoice method instead.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_thread_id
      Type: Integer
      Required: Optional
      Description: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
    - Parameter: audio
      Type: InputFile or String
      Required: 'Yes'
      Description: Audio file to send. Pass a file_id as String to send an audio file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the Internet, or upload a new one using multipart/form-data. More information on Sending Files Â»
    - Parameter: caption
      Type: String
      Required: Optional
      Description: Audio caption, 0-1024 characters after entities parsing
    - Parameter: parse_mode
      Type: String
      Required: Optional
      Description: Mode for parsing entities in the audio caption. See formatting options for more details.
    - Parameter: caption_entities
      Type: Array of MessageEntity
      Required: Optional
      Description: A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode
    - Parameter: duration
      Type: Integer
      Required: Optional
      Description: Duration of the audio in seconds
    - Parameter: performer
      Type: String
      Required: Optional
      Description: Performer
    - Parameter: title
      Type: String
      Required: Optional
      Description: Track name
    - Parameter: thumbnail
      Type: InputFile or String
      Required: Optional
      Description: Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass âattach://<file_attach_name>â if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files Â»
    - Parameter: disable_notification
      Type: Boolean
      Required: Optional
      Description: Sends the message silently. Users will receive a notification with no sound.
    - Parameter: protect_content
      Type: Boolean
      Required: Optional
      Description: Protects the contents of the sent message from forwarding and saving
    - Parameter: reply_to_message_id
      Type: Integer
      Required: Optional
      Description: If the message is a reply, ID of the original message
    - Parameter: allow_sending_without_reply
      Type: Boolean
      Required: Optional
      Description: Pass True if the message should be sent even if the specified replied-to message is not found
    - Parameter: reply_markup
      Type: InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
      Required: Optional
      Description: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
  - name: sendDocument
    children: []
    desc:
    - name: p
      content: Use this method to send general files. On success, the sent Message is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_thread_id
      Type: Integer
      Required: Optional
      Description: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
    - Parameter: document
      Type: InputFile or String
      Required: 'Yes'
      Description: File to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More information on Sending Files Â»
    - Parameter: thumbnail
      Type: InputFile or String
      Required: Optional
      Description: Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass âattach://<file_attach_name>â if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files Â»
    - Parameter: caption
      Type: String
      Required: Optional
      Description: Document caption (may also be used when resending documents by file_id), 0-1024 characters after entities parsing
    - Parameter: parse_mode
      Type: String
      Required: Optional
      Description: Mode for parsing entities in the document caption. See formatting options for more details.
    - Parameter: caption_entities
      Type: Array of MessageEntity
      Required: Optional
      Description: A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode
    - Parameter: disable_content_type_detection
      Type: Boolean
      Required: Optional
      Description: Disables automatic server-side content type detection for files uploaded using multipart/form-data
    - Parameter: disable_notification
      Type: Boolean
      Required: Optional
      Description: Sends the message silently. Users will receive a notification with no sound.
    - Parameter: protect_content
      Type: Boolean
      Required: Optional
      Description: Protects the contents of the sent message from forwarding and saving
    - Parameter: reply_to_message_id
      Type: Integer
      Required: Optional
      Description: If the message is a reply, ID of the original message
    - Parameter: allow_sending_without_reply
      Type: Boolean
      Required: Optional
      Description: Pass True if the message should be sent even if the specified replied-to message is not found
    - Parameter: reply_markup
      Type: InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
      Required: Optional
      Description: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
  - name: sendVideo
    children: []
    desc:
    - name: p
      content: Use this method to send video files, Telegram clients support MPEG4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_thread_id
      Type: Integer
      Required: Optional
      Description: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
    - Parameter: video
      Type: InputFile or String
      Required: 'Yes'
      Description: Video to send. Pass a file_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data. More information on Sending Files Â»
    - Parameter: duration
      Type: Integer
      Required: Optional
      Description: Duration of sent video in seconds
    - Parameter: width
      Type: Integer
      Required: Optional
      Description: Video width
    - Parameter: height
      Type: Integer
      Required: Optional
      Description: Video height
    - Parameter: thumbnail
      Type: InputFile or String
      Required: Optional
      Description: Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass âattach://<file_attach_name>â if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files Â»
    - Parameter: caption
      Type: String
      Required: Optional
      Description: Video caption (may also be used when resending videos by file_id), 0-1024 characters after entities parsing
    - Parameter: parse_mode
      Type: String
      Required: Optional
      Description: Mode for parsing entities in the video caption. See formatting options for more details.
    - Parameter: caption_entities
      Type: Array of MessageEntity
      Required: Optional
      Description: A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode
    - Parameter: has_spoiler
      Type: Boolean
      Required: Optional
      Description: Pass True if the video needs to be covered with a spoiler animation
    - Parameter: supports_streaming
      Type: Boolean
      Required: Optional
      Description: Pass True if the uploaded video is suitable for streaming
    - Parameter: disable_notification
      Type: Boolean
      Required: Optional
      Description: Sends the message silently. Users will receive a notification with no sound.
    - Parameter: protect_content
      Type: Boolean
      Required: Optional
      Description: Protects the contents of the sent message from forwarding and saving
    - Parameter: reply_to_message_id
      Type: Integer
      Required: Optional
      Description: If the message is a reply, ID of the original message
    - Parameter: allow_sending_without_reply
      Type: Boolean
      Required: Optional
      Description: Pass True if the message should be sent even if the specified replied-to message is not found
    - Parameter: reply_markup
      Type: InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
      Required: Optional
      Description: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
  - name: sendAnimation
    children: []
    desc:
    - name: p
      content: Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent Message is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_thread_id
      Type: Integer
      Required: Optional
      Description: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
    - Parameter: animation
      Type: InputFile or String
      Required: 'Yes'
      Description: Animation to send. Pass a file_id as String to send an animation that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an animation from the Internet, or upload a new animation using multipart/form-data. More information on Sending Files Â»
    - Parameter: duration
      Type: Integer
      Required: Optional
      Description: Duration of sent animation in seconds
    - Parameter: width
      Type: Integer
      Required: Optional
      Description: Animation width
    - Parameter: height
      Type: Integer
      Required: Optional
      Description: Animation height
    - Parameter: thumbnail
      Type: InputFile or String
      Required: Optional
      Description: Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass âattach://<file_attach_name>â if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files Â»
    - Parameter: caption
      Type: String
      Required: Optional
      Description: Animation caption (may also be used when resending animation by file_id), 0-1024 characters after entities parsing
    - Parameter: parse_mode
      Type: String
      Required: Optional
      Description: Mode for parsing entities in the animation caption. See formatting options for more details.
    - Parameter: caption_entities
      Type: Array of MessageEntity
      Required: Optional
      Description: A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode
    - Parameter: has_spoiler
      Type: Boolean
      Required: Optional
      Description: Pass True if the animation needs to be covered with a spoiler animation
    - Parameter: disable_notification
      Type: Boolean
      Required: Optional
      Description: Sends the message silently. Users will receive a notification with no sound.
    - Parameter: protect_content
      Type: Boolean
      Required: Optional
      Description: Protects the contents of the sent message from forwarding and saving
    - Parameter: reply_to_message_id
      Type: Integer
      Required: Optional
      Description: If the message is a reply, ID of the original message
    - Parameter: allow_sending_without_reply
      Type: Boolean
      Required: Optional
      Description: Pass True if the message should be sent even if the specified replied-to message is not found
    - Parameter: reply_markup
      Type: InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
      Required: Optional
      Description: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
  - name: sendVoice
    children: []
    desc:
    - name: p
      content: Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as Audio or Document). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_thread_id
      Type: Integer
      Required: Optional
      Description: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
    - Parameter: voice
      Type: InputFile or String
      Required: 'Yes'
      Description: Audio file to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More information on Sending Files Â»
    - Parameter: caption
      Type: String
      Required: Optional
      Description: Voice message caption, 0-1024 characters after entities parsing
    - Parameter: parse_mode
      Type: String
      Required: Optional
      Description: Mode for parsing entities in the voice message caption. See formatting options for more details.
    - Parameter: caption_entities
      Type: Array of MessageEntity
      Required: Optional
      Description: A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode
    - Parameter: duration
      Type: Integer
      Required: Optional
      Description: Duration of the voice message in seconds
    - Parameter: disable_notification
      Type: Boolean
      Required: Optional
      Description: Sends the message silently. Users will receive a notification with no sound.
    - Parameter: protect_content
      Type: Boolean
      Required: Optional
      Description: Protects the contents of the sent message from forwarding and saving
    - Parameter: reply_to_message_id
      Type: Integer
      Required: Optional
      Description: If the message is a reply, ID of the original message
    - Parameter: allow_sending_without_reply
      Type: Boolean
      Required: Optional
      Description: Pass True if the message should be sent even if the specified replied-to message is not found
    - Parameter: reply_markup
      Type: InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
      Required: Optional
      Description: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
  - name: sendVideoNote
    children: []
    desc:
    - name: p
      content: As of v.4.0, Telegram clients support rounded square MPEG4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent Message is returned.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_thread_id
      Type: Integer
      Required: Optional
      Description: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
    - Parameter: video_note
      Type: InputFile or String
      Required: 'Yes'
      Description: Video note to send. Pass a file_id as String to send a video note that exists on the Telegram servers (recommended) or upload a new video using multipart/form-data. More information on Sending Files Â». Sending video notes by a URL is currently unsupported
    - Parameter: duration
      Type: Integer
      Required: Optional
      Description: Duration of sent video in seconds
    - Parameter: length
      Type: Integer
      Required: Optional
      Description: Video width and height, i.e. diameter of the video message
    - Parameter: thumbnail
      Type: InputFile or String
      Required: Optional
      Description: Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass âattach://<file_attach_name>â if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files Â»
    - Parameter: disable_notification
      Type: Boolean
      Required: Optional
      Description: Sends the message silently. Users will receive a notification with no sound.
    - Parameter: protect_content
      Type: Boolean
      Required: Optional
      Description: Protects the contents of the sent message from forwarding and saving
    - Parameter: reply_to_message_id
      Type: Integer
      Required: Optional
      Description: If the message is a reply, ID of the original message
    - Parameter: allow_sending_without_reply
      Type: Boolean
      Required: Optional
      Description: Pass True if the message should be sent even if the specified replied-to message is not found
    - Parameter: reply_markup
      Type: InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
      Required: Optional
      Description: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
  - name: sendMediaGroup
    children: []
    desc:
    - name: p
      content: Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of Messages that were sent is returned.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_thread_id
      Type: Integer
      Required: Optional
      Description: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
    - Parameter: media
      Type: Array of InputMediaAudio, InputMediaDocument, InputMediaPhoto and InputMediaVideo
      Required: 'Yes'
      Description: A JSON-serialized array describing messages to be sent, must include 2-10 items
    - Parameter: disable_notification
      Type: Boolean
      Required: Optional
      Description: Sends messages silently. Users will receive a notification with no sound.
    - Parameter: protect_content
      Type: Boolean
      Required: Optional
      Description: Protects the contents of the sent messages from forwarding and saving
    - Parameter: reply_to_message_id
      Type: Integer
      Required: Optional
      Description: If the messages are a reply, ID of the original message
    - Parameter: allow_sending_without_reply
      Type: Boolean
      Required: Optional
      Description: Pass True if the message should be sent even if the specified replied-to message is not found
  - name: sendLocation
    children: []
    desc:
    - name: p
      content: Use this method to send point on the map. On success, the sent Message is returned.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_thread_id
      Type: Integer
      Required: Optional
      Description: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
    - Parameter: latitude
      Type: Float number
      Required: 'Yes'
      Description: Latitude of the location
    - Parameter: longitude
      Type: Float number
      Required: 'Yes'
      Description: Longitude of the location
    - Parameter: horizontal_accuracy
      Type: Float number
      Required: Optional
      Description: The radius of uncertainty for the location, measured in meters; 0-1500
    - Parameter: live_period
      Type: Integer
      Required: Optional
      Description: Period in seconds for which the location will be updated (see Live Locations, should be between 60 and 86400.
    - Parameter: heading
      Type: Integer
      Required: Optional
      Description: For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
    - Parameter: proximity_alert_radius
      Type: Integer
      Required: Optional
      Description: For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
    - Parameter: disable_notification
      Type: Boolean
      Required: Optional
      Description: Sends the message silently. Users will receive a notification with no sound.
    - Parameter: protect_content
      Type: Boolean
      Required: Optional
      Description: Protects the contents of the sent message from forwarding and saving
    - Parameter: reply_to_message_id
      Type: Integer
      Required: Optional
      Description: If the message is a reply, ID of the original message
    - Parameter: allow_sending_without_reply
      Type: Boolean
      Required: Optional
      Description: Pass True if the message should be sent even if the specified replied-to message is not found
    - Parameter: reply_markup
      Type: InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
      Required: Optional
      Description: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
  - name: sendVenue
    children: []
    desc:
    - name: p
      content: Use this method to send information about a venue. On success, the sent Message is returned.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_thread_id
      Type: Integer
      Required: Optional
      Description: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
    - Parameter: latitude
      Type: Float number
      Required: 'Yes'
      Description: Latitude of the venue
    - Parameter: longitude
      Type: Float number
      Required: 'Yes'
      Description: Longitude of the venue
    - Parameter: title
      Type: String
      Required: 'Yes'
      Description: Name of the venue
    - Parameter: address
      Type: String
      Required: 'Yes'
      Description: Address of the venue
    - Parameter: foursquare_id
      Type: String
      Required: Optional
      Description: Foursquare identifier of the venue
    - Parameter: foursquare_type
      Type: String
      Required: Optional
      Description: Foursquare type of the venue, if known. (For example, âarts_entertainment/defaultâ, âarts_entertainment/aquariumâ or âfood/icecreamâ.)
    - Parameter: google_place_id
      Type: String
      Required: Optional
      Description: Google Places identifier of the venue
    - Parameter: google_place_type
      Type: String
      Required: Optional
      Description: Google Places type of the venue. (See supported types.)
    - Parameter: disable_notification
      Type: Boolean
      Required: Optional
      Description: Sends the message silently. Users will receive a notification with no sound.
    - Parameter: protect_content
      Type: Boolean
      Required: Optional
      Description: Protects the contents of the sent message from forwarding and saving
    - Parameter: reply_to_message_id
      Type: Integer
      Required: Optional
      Description: If the message is a reply, ID of the original message
    - Parameter: allow_sending_without_reply
      Type: Boolean
      Required: Optional
      Description: Pass True if the message should be sent even if the specified replied-to message is not found
    - Parameter: reply_markup
      Type: InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
      Required: Optional
      Description: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
  - name: sendContact
    children: []
    desc:
    - name: p
      content: Use this method to send phone contacts. On success, the sent Message is returned.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_thread_id
      Type: Integer
      Required: Optional
      Description: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
    - Parameter: phone_number
      Type: String
      Required: 'Yes'
      Description: Contact's phone number
    - Parameter: first_name
      Type: String
      Required: 'Yes'
      Description: Contact's first name
    - Parameter: last_name
      Type: String
      Required: Optional
      Description: Contact's last name
    - Parameter: vcard
      Type: String
      Required: Optional
      Description: Additional data about the contact in the form of a vCard, 0-2048 bytes
    - Parameter: disable_notification
      Type: Boolean
      Required: Optional
      Description: Sends the message silently. Users will receive a notification with no sound.
    - Parameter: protect_content
      Type: Boolean
      Required: Optional
      Description: Protects the contents of the sent message from forwarding and saving
    - Parameter: reply_to_message_id
      Type: Integer
      Required: Optional
      Description: If the message is a reply, ID of the original message
    - Parameter: allow_sending_without_reply
      Type: Boolean
      Required: Optional
      Description: Pass True if the message should be sent even if the specified replied-to message is not found
    - Parameter: reply_markup
      Type: InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
      Required: Optional
      Description: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
  - name: sendPoll
    children: []
    desc:
    - name: p
      content: Use this method to send a native poll. On success, the sent Message is returned.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_thread_id
      Type: Integer
      Required: Optional
      Description: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
    - Parameter: question
      Type: String
      Required: 'Yes'
      Description: Poll question, 1-300 characters
    - Parameter: options
      Type: Array of String
      Required: 'Yes'
      Description: A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
    - Parameter: is_anonymous
      Type: Boolean
      Required: Optional
      Description: True, if the poll needs to be anonymous, defaults to True
    - Parameter: type
      Type: String
      Required: Optional
      Description: Poll type, âquizâ or âregularâ, defaults to âregularâ
    - Parameter: allows_multiple_answers
      Type: Boolean
      Required: Optional
      Description: True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to False
    - Parameter: correct_option_id
      Type: Integer
      Required: Optional
      Description: 0-based identifier of the correct answer option, required for polls in quiz mode
    - Parameter: explanation
      Type: String
      Required: Optional
      Description: Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
    - Parameter: explanation_parse_mode
      Type: String
      Required: Optional
      Description: Mode for parsing entities in the explanation. See formatting options for more details.
    - Parameter: explanation_entities
      Type: Array of MessageEntity
      Required: Optional
      Description: A JSON-serialized list of special entities that appear in the poll explanation, which can be specified instead of parse_mode
    - Parameter: open_period
      Type: Integer
      Required: Optional
      Description: Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with close_date.
    - Parameter: close_date
      Type: Integer
      Required: Optional
      Description: Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with open_period.
    - Parameter: is_closed
      Type: Boolean
      Required: Optional
      Description: Pass True if the poll needs to be immediately closed. This can be useful for poll preview.
    - Parameter: disable_notification
      Type: Boolean
      Required: Optional
      Description: Sends the message silently. Users will receive a notification with no sound.
    - Parameter: protect_content
      Type: Boolean
      Required: Optional
      Description: Protects the contents of the sent message from forwarding and saving
    - Parameter: reply_to_message_id
      Type: Integer
      Required: Optional
      Description: If the message is a reply, ID of the original message
    - Parameter: allow_sending_without_reply
      Type: Boolean
      Required: Optional
      Description: Pass True if the message should be sent even if the specified replied-to message is not found
    - Parameter: reply_markup
      Type: InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
      Required: Optional
      Description: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
  - name: sendDice
    children: []
    desc:
    - name: p
      content: Use this method to send an animated emoji that will display a random value. On success, the sent Message is returned.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_thread_id
      Type: Integer
      Required: Optional
      Description: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
    - Parameter: emoji
      Type: String
      Required: Optional
      Description: Emoji on which the dice throw animation is based. Currently, must be one of ââ, ââ, ââ, ââ, ââ, or ââ. Dice can have values 1-6 for ââ, ââ and ââ, values 1-5 for ââ and ââ, and values 1-64 for ââ. Defaults to ââ
    - Parameter: disable_notification
      Type: Boolean
      Required: Optional
      Description: Sends the message silently. Users will receive a notification with no sound.
    - Parameter: protect_content
      Type: Boolean
      Required: Optional
      Description: Protects the contents of the sent message from forwarding
    - Parameter: reply_to_message_id
      Type: Integer
      Required: Optional
      Description: If the message is a reply, ID of the original message
    - Parameter: allow_sending_without_reply
      Type: Boolean
      Required: Optional
      Description: Pass True if the message should be sent even if the specified replied-to message is not found
    - Parameter: reply_markup
      Type: InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
      Required: Optional
      Description: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
  - name: sendChatAction
    children: []
    desc:
    - name: p
      content: Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns True on success.
    - name: blockquote
      content: 'Example: The ImageBot needs some time to process a request and upload the image. Instead of sending a text message along the lines of âRetrieving image, please waitâ¦â, the bot may use sendChatAction with action = upload_photo. The user will see a âsending photoâ status for the bot.'
    - name: p
      content: We only recommend using this method when a response from the bot will take a noticeable amount of time to arrive.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_thread_id
      Type: Integer
      Required: Optional
      Description: Unique identifier for the target message thread; supergroups only
    - Parameter: action
      Type: String
      Required: 'Yes'
      Description: 'Type of action to broadcast. Choose one, depending on what the user is about to receive: typing for text messages, upload_photo for photos, record_video or upload_video for videos, record_voice or upload_voice for voice notes, upload_document for general files, choose_sticker for stickers, find_location for location data, record_video_note or upload_video_note for video notes.'
  - name: getUserProfilePhotos
    children: []
    desc:
    - name: p
      content: Use this method to get a list of profile pictures for a user. Returns a UserProfilePhotos object.
    table:
    - Parameter: user_id
      Type: Integer
      Required: 'Yes'
      Description: Unique identifier of the target user
    - Parameter: offset
      Type: Integer
      Required: Optional
      Description: Sequential number of the first photo to be returned. By default, all photos are returned.
    - Parameter: limit
      Type: Integer
      Required: Optional
      Description: Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
  - name: getFile
    children: []
    desc:
    - name: p
      content: Use this method to get basic information about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a File object is returned. The file can then be downloaded via the link https://api.telegram.org/file/bot<token>/<file_path>, where <file_path> is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile again.
    - name: p
      content: 'Note: This function may not preserve the original file name and MIME type. You should save the file''s MIME type and name (if available) when the File object is received.'
    table:
    - Parameter: file_id
      Type: String
      Required: 'Yes'
      Description: File identifier to get information about
  - name: banChatMember
    children: []
    desc:
    - name: p
      content: Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target group or username of the target supergroup or channel (in the format @channelusername)
    - Parameter: user_id
      Type: Integer
      Required: 'Yes'
      Description: Unique identifier of the target user
    - Parameter: until_date
      Type: Integer
      Required: Optional
      Description: Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever. Applied for supergroups and channels only.
    - Parameter: revoke_messages
      Type: Boolean
      Required: Optional
      Description: Pass True to delete all messages from the chat for the user that is being removed. If False, the user will be able to see messages in the group that were sent before the user was removed. Always True for supergroups and channels.
  - name: unbanChatMember
    children: []
    desc:
    - name: p
      content: Use this method to unban a previously banned user in a supergroup or channel. The user will not return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be removed from the chat. If you don't want this, use the parameter only_if_banned. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target group or username of the target supergroup or channel (in the format @channelusername)
    - Parameter: user_id
      Type: Integer
      Required: 'Yes'
      Description: Unique identifier of the target user
    - Parameter: only_if_banned
      Type: Boolean
      Required: Optional
      Description: Do nothing if the user is not banned
  - name: restrictChatMember
    children: []
    desc:
    - name: p
      content: Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate administrator rights. Pass True for all permissions to lift restrictions from a user. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
    - Parameter: user_id
      Type: Integer
      Required: 'Yes'
      Description: Unique identifier of the target user
    - Parameter: permissions
      Type: ChatPermissions
      Required: 'Yes'
      Description: A JSON-serialized object for new user permissions
    - Parameter: use_independent_chat_permissions
      Type: Boolean
      Required: Optional
      Description: Pass True if chat permissions are set independently. Otherwise, the can_send_other_messages and can_add_web_page_previews permissions will imply the can_send_messages, can_send_audios, can_send_documents, can_send_photos, can_send_videos, can_send_video_notes, and can_send_voice_notes permissions; the can_send_polls permission will imply the can_send_messages permission.
    - Parameter: until_date
      Type: Integer
      Required: Optional
      Description: Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever
  - name: promoteChatMember
    children: []
    desc:
    - name: p
      content: Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Pass False for all boolean parameters to demote a user. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: user_id
      Type: Integer
      Required: 'Yes'
      Description: Unique identifier of the target user
    - Parameter: is_anonymous
      Type: Boolean
      Required: Optional
      Description: Pass True if the administrator's presence in the chat is hidden
    - Parameter: can_manage_chat
      Type: Boolean
      Required: Optional
      Description: Pass True if the administrator can access the chat event log, chat statistics, message statistics in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode. Implied by any other administrator privilege
    - Parameter: can_post_messages
      Type: Boolean
      Required: Optional
      Description: Pass True if the administrator can create channel posts, channels only
    - Parameter: can_edit_messages
      Type: Boolean
      Required: Optional
      Description: Pass True if the administrator can edit messages of other users and can pin messages, channels only
    - Parameter: can_delete_messages
      Type: Boolean
      Required: Optional
      Description: Pass True if the administrator can delete messages of other users
    - Parameter: can_manage_video_chats
      Type: Boolean
      Required: Optional
      Description: Pass True if the administrator can manage video chats
    - Parameter: can_restrict_members
      Type: Boolean
      Required: Optional
      Description: Pass True if the administrator can restrict, ban or unban chat members
    - Parameter: can_promote_members
      Type: Boolean
      Required: Optional
      Description: Pass True if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by him)
    - Parameter: can_change_info
      Type: Boolean
      Required: Optional
      Description: Pass True if the administrator can change chat title, photo and other settings
    - Parameter: can_invite_users
      Type: Boolean
      Required: Optional
      Description: Pass True if the administrator can invite new users to the chat
    - Parameter: can_pin_messages
      Type: Boolean
      Required: Optional
      Description: Pass True if the administrator can pin messages, supergroups only
    - Parameter: can_manage_topics
      Type: Boolean
      Required: Optional
      Description: Pass True if the user is allowed to create, rename, close, and reopen forum topics, supergroups only
  - name: setChatAdministratorCustomTitle
    children: []
    desc:
    - name: p
      content: Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
    - Parameter: user_id
      Type: Integer
      Required: 'Yes'
      Description: Unique identifier of the target user
    - Parameter: custom_title
      Type: String
      Required: 'Yes'
      Description: New custom title for the administrator; 0-16 characters, emoji are not allowed
  - name: banChatSenderChat
    children: []
    desc:
    - name: p
      content: Use this method to ban a channel chat in a supergroup or a channel. Until the chat is unbanned, the owner of the banned chat won't be able to send messages on behalf of any of their channels. The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: sender_chat_id
      Type: Integer
      Required: 'Yes'
      Description: Unique identifier of the target sender chat
  - name: unbanChatSenderChat
    children: []
    desc:
    - name: p
      content: Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must be an administrator for this to work and must have the appropriate administrator rights. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: sender_chat_id
      Type: Integer
      Required: 'Yes'
      Description: Unique identifier of the target sender chat
  - name: setChatPermissions
    children: []
    desc:
    - name: p
      content: Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the can_restrict_members administrator rights. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
    - Parameter: permissions
      Type: ChatPermissions
      Required: 'Yes'
      Description: A JSON-serialized object for new default chat permissions
    - Parameter: use_independent_chat_permissions
      Type: Boolean
      Required: Optional
      Description: Pass True if chat permissions are set independently. Otherwise, the can_send_other_messages and can_add_web_page_previews permissions will imply the can_send_messages, can_send_audios, can_send_documents, can_send_photos, can_send_videos, can_send_video_notes, and can_send_voice_notes permissions; the can_send_polls permission will imply the can_send_messages permission.
  - name: exportChatInviteLink
    children: []
    desc:
    - name: p
      content: Use this method to generate a new primary invite link for a chat; any previously generated primary link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the new invite link as String on success.
    - name: blockquote
      content: 'Note: Each administrator in a chat generates their own invite links. Bots can''t use invite links generated by other administrators. If you want your bot to work with invite links, it will need to generate its own link using exportChatInviteLink or by calling the getChat method. If your bot needs to generate a new primary invite link replacing its previous one, use exportChatInviteLink again.'
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
  - name: createChatInviteLink
    children: []
    desc:
    - name: p
      content: Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method revokeChatInviteLink. Returns the new invite link as ChatInviteLink object.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: name
      Type: String
      Required: Optional
      Description: Invite link name; 0-32 characters
    - Parameter: expire_date
      Type: Integer
      Required: Optional
      Description: Point in time (Unix timestamp) when the link will expire
    - Parameter: member_limit
      Type: Integer
      Required: Optional
      Description: The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999
    - Parameter: creates_join_request
      Type: Boolean
      Required: Optional
      Description: True, if users joining the chat via the link need to be approved by chat administrators. If True, member_limit can't be specified
  - name: editChatInviteLink
    children: []
    desc:
    - name: p
      content: Use this method to edit a non-primary invite link created by the bot. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the edited invite link as a ChatInviteLink object.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: invite_link
      Type: String
      Required: 'Yes'
      Description: The invite link to edit
    - Parameter: name
      Type: String
      Required: Optional
      Description: Invite link name; 0-32 characters
    - Parameter: expire_date
      Type: Integer
      Required: Optional
      Description: Point in time (Unix timestamp) when the link will expire
    - Parameter: member_limit
      Type: Integer
      Required: Optional
      Description: The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999
    - Parameter: creates_join_request
      Type: Boolean
      Required: Optional
      Description: True, if users joining the chat via the link need to be approved by chat administrators. If True, member_limit can't be specified
  - name: revokeChatInviteLink
    children: []
    desc:
    - name: p
      content: Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the revoked invite link as ChatInviteLink object.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier of the target chat or username of the target channel (in the format @channelusername)
    - Parameter: invite_link
      Type: String
      Required: 'Yes'
      Description: The invite link to revoke
  - name: approveChatJoinRequest
    children: []
    desc:
    - name: p
      content: Use this method to approve a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: user_id
      Type: Integer
      Required: 'Yes'
      Description: Unique identifier of the target user
  - name: declineChatJoinRequest
    children: []
    desc:
    - name: p
      content: Use this method to decline a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: user_id
      Type: Integer
      Required: 'Yes'
      Description: Unique identifier of the target user
  - name: setChatPhoto
    children: []
    desc:
    - name: p
      content: Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: photo
      Type: InputFile
      Required: 'Yes'
      Description: New chat photo, uploaded using multipart/form-data
  - name: deleteChatPhoto
    children: []
    desc:
    - name: p
      content: Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
  - name: setChatTitle
    children: []
    desc:
    - name: p
      content: Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: title
      Type: String
      Required: 'Yes'
      Description: New chat title, 1-128 characters
  - name: setChatDescription
    children: []
    desc:
    - name: p
      content: Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: description
      Type: String
      Required: Optional
      Description: New chat description, 0-255 characters
  - name: pinChatMessage
    children: []
    desc:
    - name: p
      content: Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_id
      Type: Integer
      Required: 'Yes'
      Description: Identifier of a message to pin
    - Parameter: disable_notification
      Type: Boolean
      Required: Optional
      Description: Pass True if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.
  - name: unpinChatMessage
    children: []
    desc:
    - name: p
      content: Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_id
      Type: Integer
      Required: Optional
      Description: Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned.
  - name: unpinAllChatMessages
    children: []
    desc:
    - name: p
      content: Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
  - name: leaveChat
    children: []
    desc:
    - name: p
      content: Use this method for your bot to leave a group, supergroup or channel. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
  - name: getChat
    children: []
    desc:
    - name: p
      content: Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a Chat object on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
  - name: getChatAdministrators
    children: []
    desc:
    - name: p
      content: Use this method to get a list of administrators in a chat, which aren't bots. Returns an Array of ChatMember objects.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
  - name: getChatMemberCount
    children: []
    desc:
    - name: p
      content: Use this method to get the number of members in a chat. Returns Int on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
  - name: getChatMember
    children: []
    desc:
    - name: p
      content: Use this method to get information about a member of a chat. The method is only guaranteed to work for other users if the bot is an administrator in the chat. Returns a ChatMember object on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)
    - Parameter: user_id
      Type: Integer
      Required: 'Yes'
      Description: Unique identifier of the target user
  - name: setChatStickerSet
    children: []
    desc:
    - name: p
      content: Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
    - Parameter: sticker_set_name
      Type: String
      Required: 'Yes'
      Description: Name of the sticker set to be set as the group sticker set
  - name: deleteChatStickerSet
    children: []
    desc:
    - name: p
      content: Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
  - name: getForumTopicIconStickers
    children: []
    desc:
    - name: p
      content: Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user. Requires no parameters. Returns an Array of Sticker objects.
  - name: createForumTopic
    children: []
    desc:
    - name: p
      content: Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns information about the created topic as a ForumTopic object.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
    - Parameter: name
      Type: String
      Required: 'Yes'
      Description: Topic name, 1-128 characters
    - Parameter: icon_color
      Type: Integer
      Required: Optional
      Description: Color of the topic icon in RGB format. Currently, must be one of 7322096 (0x6FB9F0), 16766590 (0xFFD67E), 13338331 (0xCB86DB), 9367192 (0x8EEE98), 16749490 (0xFF93B2), or 16478047 (0xFB6F5F)
    - Parameter: icon_custom_emoji_id
      Type: String
      Required: Optional
      Description: Unique identifier of the custom emoji shown as the topic icon. Use getForumTopicIconStickers to get all allowed custom emoji identifiers.
  - name: editForumTopic
    children: []
    desc:
    - name: p
      content: Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
    - Parameter: message_thread_id
      Type: Integer
      Required: 'Yes'
      Description: Unique identifier for the target message thread of the forum topic
    - Parameter: name
      Type: String
      Required: Optional
      Description: New topic name, 0-128 characters. If not specified or empty, the current name of the topic will be kept
    - Parameter: icon_custom_emoji_id
      Type: String
      Required: Optional
      Description: New unique identifier of the custom emoji shown as the topic icon. Use getForumTopicIconStickers to get all allowed custom emoji identifiers. Pass an empty string to remove the icon. If not specified, the current icon will be kept
  - name: closeForumTopic
    children: []
    desc:
    - name: p
      content: Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
    - Parameter: message_thread_id
      Type: Integer
      Required: 'Yes'
      Description: Unique identifier for the target message thread of the forum topic
  - name: reopenForumTopic
    children: []
    desc:
    - name: p
      content: Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
    - Parameter: message_thread_id
      Type: Integer
      Required: 'Yes'
      Description: Unique identifier for the target message thread of the forum topic
  - name: deleteForumTopic
    children: []
    desc:
    - name: p
      content: Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_delete_messages administrator rights. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
    - Parameter: message_thread_id
      Type: Integer
      Required: 'Yes'
      Description: Unique identifier for the target message thread of the forum topic
  - name: unpinAllForumTopicMessages
    children: []
    desc:
    - name: p
      content: Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
    - Parameter: message_thread_id
      Type: Integer
      Required: 'Yes'
      Description: Unique identifier for the target message thread of the forum topic
  - name: editGeneralForumTopic
    children: []
    desc:
    - name: p
      content: Use this method to edit the name of the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
    - Parameter: name
      Type: String
      Required: 'Yes'
      Description: New topic name, 1-128 characters
  - name: closeGeneralForumTopic
    children: []
    desc:
    - name: p
      content: Use this method to close an open 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
  - name: reopenGeneralForumTopic
    children: []
    desc:
    - name: p
      content: Use this method to reopen a closed 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. The topic will be automatically unhidden if it was hidden. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
  - name: hideGeneralForumTopic
    children: []
    desc:
    - name: p
      content: Use this method to hide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. The topic will be automatically closed if it was open. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
  - name: unhideGeneralForumTopic
    children: []
    desc:
    - name: p
      content: Use this method to unhide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)
  - name: answerCallbackQuery
    children: []
    desc:
    - name: p
      content: Use this method to send answers to callback queries sent from inline keyboards. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, True is returned.
    - name: blockquote
      content: Alternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via @BotFather and accept the terms. Otherwise, you may use links like t.me/your_bot?start=XXXX that open your bot with a parameter.
    table:
    - Parameter: callback_query_id
      Type: String
      Required: 'Yes'
      Description: Unique identifier for the query to be answered
    - Parameter: text
      Type: String
      Required: Optional
      Description: Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
    - Parameter: show_alert
      Type: Boolean
      Required: Optional
      Description: If True, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to false.
    - Parameter: url
      Type: String
      Required: Optional
      Description: URL that will be opened by the user's client. If you have created a Game and accepted the conditions via @BotFather, specify the URL that opens your game - note that this will only work if the query comes from a callback_game button.Otherwise, you may use links like t.me/your_bot?start=XXXX that open your bot with a parameter.
    - Parameter: cache_time
      Type: Integer
      Required: Optional
      Description: The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
  - name: setMyCommands
    children: []
    desc:
    - name: p
      content: Use this method to change the list of the bot's commands. See this manual for more details about bot commands. Returns True on success.
    table:
    - Parameter: commands
      Type: Array of BotCommand
      Required: 'Yes'
      Description: A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.
    - Parameter: scope
      Type: BotCommandScope
      Required: Optional
      Description: A JSON-serialized object, describing scope of users for which the commands are relevant. Defaults to BotCommandScopeDefault.
    - Parameter: language_code
      Type: String
      Required: Optional
      Description: A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands
  - name: deleteMyCommands
    children: []
    desc:
    - name: p
      content: Use this method to delete the list of the bot's commands for the given scope and user language. After deletion, higher level commands will be shown to affected users. Returns True on success.
    table:
    - Parameter: scope
      Type: BotCommandScope
      Required: Optional
      Description: A JSON-serialized object, describing scope of users for which the commands are relevant. Defaults to BotCommandScopeDefault.
    - Parameter: language_code
      Type: String
      Required: Optional
      Description: A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands
  - name: getMyCommands
    children: []
    desc:
    - name: p
      content: Use this method to get the current list of the bot's commands for the given scope and user language. Returns an Array of BotCommand objects. If commands aren't set, an empty list is returned.
    table:
    - Parameter: scope
      Type: BotCommandScope
      Required: Optional
      Description: A JSON-serialized object, describing scope of users. Defaults to BotCommandScopeDefault.
    - Parameter: language_code
      Type: String
      Required: Optional
      Description: A two-letter ISO 639-1 language code or an empty string
  - name: setMyDescription
    children: []
    desc:
    - name: p
      content: Use this method to change the bot's description, which is shown in the chat with the bot if the chat is empty. Returns True on success.
    table:
    - Parameter: description
      Type: String
      Required: Optional
      Description: New bot description; 0-512 characters. Pass an empty string to remove the dedicated description for the given language.
    - Parameter: language_code
      Type: String
      Required: Optional
      Description: A two-letter ISO 639-1 language code. If empty, the description will be applied to all users for whose language there is no dedicated description.
  - name: getMyDescription
    children: []
    desc:
    - name: p
      content: Use this method to get the current bot description for the given user language. Returns BotDescription on success.
    table:
    - Parameter: language_code
      Type: String
      Required: Optional
      Description: A two-letter ISO 639-1 language code or an empty string
  - name: setMyShortDescription
    children: []
    desc:
    - name: p
      content: Use this method to change the bot's short description, which is shown on the bot's profile page and is sent together with the link when users share the bot. Returns True on success.
    table:
    - Parameter: short_description
      Type: String
      Required: Optional
      Description: New short description for the bot; 0-120 characters. Pass an empty string to remove the dedicated short description for the given language.
    - Parameter: language_code
      Type: String
      Required: Optional
      Description: A two-letter ISO 639-1 language code. If empty, the short description will be applied to all users for whose language there is no dedicated short description.
  - name: getMyShortDescription
    children: []
    desc:
    - name: p
      content: Use this method to get the current bot short description for the given user language. Returns BotShortDescription on success.
    table:
    - Parameter: language_code
      Type: String
      Required: Optional
      Description: A two-letter ISO 639-1 language code or an empty string
  - name: setChatMenuButton
    children: []
    desc:
    - name: p
      content: Use this method to change the bot's menu button in a private chat, or the default menu button. Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer
      Required: Optional
      Description: Unique identifier for the target private chat. If not specified, default bot's menu button will be changed
    - Parameter: menu_button
      Type: MenuButton
      Required: Optional
      Description: A JSON-serialized object for the bot's new menu button. Defaults to MenuButtonDefault
  - name: getChatMenuButton
    children: []
    desc:
    - name: p
      content: Use this method to get the current value of the bot's menu button in a private chat, or the default menu button. Returns MenuButton on success.
    table:
    - Parameter: chat_id
      Type: Integer
      Required: Optional
      Description: Unique identifier for the target private chat. If not specified, default bot's menu button will be returned
  - name: setMyDefaultAdministratorRights
    children: []
    desc:
    - name: p
      content: Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels. These rights will be suggested to users, but they are free to modify the list before adding the bot. Returns True on success.
    table:
    - Parameter: rights
      Type: ChatAdministratorRights
      Required: Optional
      Description: A JSON-serialized object describing new default administrator rights. If not specified, the default administrator rights will be cleared.
    - Parameter: for_channels
      Type: Boolean
      Required: Optional
      Description: Pass True to change the default administrator rights of the bot in channels. Otherwise, the default administrator rights of the bot for groups and supergroups will be changed.
  - name: getMyDefaultAdministratorRights
    children: []
    desc:
    - name: p
      content: Use this method to get the current default administrator rights of the bot. Returns ChatAdministratorRights on success.
    table:
    - Parameter: for_channels
      Type: Boolean
      Required: Optional
      Description: Pass True to get default administrator rights of the bot in channels. Otherwise, default administrator rights of the bot for groups and supergroups will be returned.
  - name: Inline mode methods
    children: []
    desc:
    - name: p
      content: Methods and objects used in the inline mode are described in the Inline mode section.
  desc:
  - name: blockquote
    content: All methods in the Bot API are case-insensitive. We support GET and POST HTTP methods. Use either URL query string or application/json or application/x-www-form-urlencoded or multipart/form-data for passing parameters in Bot API requests.On successful call, a JSON-object containing the result will be returned.
- name: Updating messages
  children:
  - name: editMessageText
    children: []
    desc:
    - name: p
      content: Use this method to edit text and game messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: Optional
      Description: Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_id
      Type: Integer
      Required: Optional
      Description: Required if inline_message_id is not specified. Identifier of the message to edit
    - Parameter: inline_message_id
      Type: String
      Required: Optional
      Description: Required if chat_id and message_id are not specified. Identifier of the inline message
    - Parameter: text
      Type: String
      Required: 'Yes'
      Description: New text of the message, 1-4096 characters after entities parsing
    - Parameter: parse_mode
      Type: String
      Required: Optional
      Description: Mode for parsing entities in the message text. See formatting options for more details.
    - Parameter: entities
      Type: Array of MessageEntity
      Required: Optional
      Description: A JSON-serialized list of special entities that appear in message text, which can be specified instead of parse_mode
    - Parameter: disable_web_page_preview
      Type: Boolean
      Required: Optional
      Description: Disables link previews for links in this message
    - Parameter: reply_markup
      Type: InlineKeyboardMarkup
      Required: Optional
      Description: A JSON-serialized object for an inline keyboard.
  - name: editMessageCaption
    children: []
    desc:
    - name: p
      content: Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: Optional
      Description: Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_id
      Type: Integer
      Required: Optional
      Description: Required if inline_message_id is not specified. Identifier of the message to edit
    - Parameter: inline_message_id
      Type: String
      Required: Optional
      Description: Required if chat_id and message_id are not specified. Identifier of the inline message
    - Parameter: caption
      Type: String
      Required: Optional
      Description: New caption of the message, 0-1024 characters after entities parsing
    - Parameter: parse_mode
      Type: String
      Required: Optional
      Description: Mode for parsing entities in the message caption. See formatting options for more details.
    - Parameter: caption_entities
      Type: Array of MessageEntity
      Required: Optional
      Description: A JSON-serialized list of special entities that appear in the caption, which can be specified instead of parse_mode
    - Parameter: reply_markup
      Type: InlineKeyboardMarkup
      Required: Optional
      Description: A JSON-serialized object for an inline keyboard.
  - name: editMessageMedia
    children: []
    desc:
    - name: p
      content: Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded; use a previously uploaded file via its file_id or specify a URL. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: Optional
      Description: Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_id
      Type: Integer
      Required: Optional
      Description: Required if inline_message_id is not specified. Identifier of the message to edit
    - Parameter: inline_message_id
      Type: String
      Required: Optional
      Description: Required if chat_id and message_id are not specified. Identifier of the inline message
    - Parameter: media
      Type: InputMedia
      Required: 'Yes'
      Description: A JSON-serialized object for a new media content of the message
    - Parameter: reply_markup
      Type: InlineKeyboardMarkup
      Required: Optional
      Description: A JSON-serialized object for a new inline keyboard.
  - name: editMessageLiveLocation
    children: []
    desc:
    - name: p
      content: Use this method to edit live location messages. A location can be edited until its live_period expires or editing is explicitly disabled by a call to stopMessageLiveLocation. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: Optional
      Description: Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_id
      Type: Integer
      Required: Optional
      Description: Required if inline_message_id is not specified. Identifier of the message to edit
    - Parameter: inline_message_id
      Type: String
      Required: Optional
      Description: Required if chat_id and message_id are not specified. Identifier of the inline message
    - Parameter: latitude
      Type: Float number
      Required: 'Yes'
      Description: Latitude of new location
    - Parameter: longitude
      Type: Float number
      Required: 'Yes'
      Description: Longitude of new location
    - Parameter: horizontal_accuracy
      Type: Float number
      Required: Optional
      Description: The radius of uncertainty for the location, measured in meters; 0-1500
    - Parameter: heading
      Type: Integer
      Required: Optional
      Description: Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
    - Parameter: proximity_alert_radius
      Type: Integer
      Required: Optional
      Description: The maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
    - Parameter: reply_markup
      Type: InlineKeyboardMarkup
      Required: Optional
      Description: A JSON-serialized object for a new inline keyboard.
  - name: stopMessageLiveLocation
    children: []
    desc:
    - name: p
      content: Use this method to stop updating a live location message before live_period expires. On success, if the message is not an inline message, the edited Message is returned, otherwise True is returned.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: Optional
      Description: Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_id
      Type: Integer
      Required: Optional
      Description: Required if inline_message_id is not specified. Identifier of the message with live location to stop
    - Parameter: inline_message_id
      Type: String
      Required: Optional
      Description: Required if chat_id and message_id are not specified. Identifier of the inline message
    - Parameter: reply_markup
      Type: InlineKeyboardMarkup
      Required: Optional
      Description: A JSON-serialized object for a new inline keyboard.
  - name: editMessageReplyMarkup
    children: []
    desc:
    - name: p
      content: Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: Optional
      Description: Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_id
      Type: Integer
      Required: Optional
      Description: Required if inline_message_id is not specified. Identifier of the message to edit
    - Parameter: inline_message_id
      Type: String
      Required: Optional
      Description: Required if chat_id and message_id are not specified. Identifier of the inline message
    - Parameter: reply_markup
      Type: InlineKeyboardMarkup
      Required: Optional
      Description: A JSON-serialized object for an inline keyboard.
  - name: stopPoll
    children: []
    desc:
    - name: p
      content: Use this method to stop a poll which was sent by the bot. On success, the stopped Poll is returned.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_id
      Type: Integer
      Required: 'Yes'
      Description: Identifier of the original message with the poll
    - Parameter: reply_markup
      Type: InlineKeyboardMarkup
      Required: Optional
      Description: A JSON-serialized object for a new message inline keyboard.
  - name: deleteMessage
    children: []
    desc:
    - name: p
      content: Use this method to delete a message, including service messages, with the following limitations:- A message can only be deleted if it was sent less than 48 hours ago.- Service messages about a supergroup, channel, or forum topic creation can't be deleted.- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.- Bots can delete outgoing messages in private chats, groups, and supergroups.- Bots can delete incoming messages in private chats.- Bots granted can_post_messages permissions can delete outgoing messages in channels.- If the bot is an administrator of a group, it can delete any message there.- If the bot has can_delete_messages permission in a supergroup or a channel, it can delete any message there.Returns True on success.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_id
      Type: Integer
      Required: 'Yes'
      Description: Identifier of the message to delete
  desc:
  - name: p
    content: The following methods allow you to change an existing message in the message history instead of sending a new one with a result of an action. This is most useful for messages with inline keyboards using callback queries, but can also help reduce clutter in conversations with regular chat bots.
  - name: p
    content: Please note, that it is currently only possible to edit messages without reply_markup or with inline keyboards.
- name: Stickers
  children:
  - name: Sticker
    children: []
    desc:
    - name: p
      content: This object represents a sticker.
    table:
    - Field: file_id
      Type: String
      Description: Identifier for this file, which can be used to download or reuse the file
    - Field: file_unique_id
      Type: String
      Description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    - Field: type
      Type: String
      Description: Type of the sticker, currently one of âregularâ, âmaskâ, âcustom_emojiâ. The type of the sticker is independent from its format, which is determined by the fields is_animated and is_video.
    - Field: width
      Type: Integer
      Description: Sticker width
    - Field: height
      Type: Integer
      Description: Sticker height
    - Field: is_animated
      Type: Boolean
      Description: True, if the sticker is animated
    - Field: is_video
      Type: Boolean
      Description: True, if the sticker is a video sticker
    - Field: thumbnail
      Type: PhotoSize
      Description: Optional. Sticker thumbnail in the .WEBP or .JPG format
    - Field: emoji
      Type: String
      Description: Optional. Emoji associated with the sticker
    - Field: set_name
      Type: String
      Description: Optional. Name of the sticker set to which the sticker belongs
    - Field: premium_animation
      Type: File
      Description: Optional. For premium regular stickers, premium animation for the sticker
    - Field: mask_position
      Type: MaskPosition
      Description: Optional. For mask stickers, the position where the mask should be placed
    - Field: custom_emoji_id
      Type: String
      Description: Optional. For custom emoji stickers, unique identifier of the custom emoji
    - Field: needs_repainting
      Type: 'True'
      Description: Optional. True, if the sticker must be repainted to a text color in messages, the color of the Telegram Premium badge in emoji status, white color on chat photos, or another appropriate color in other places
    - Field: file_size
      Type: Integer
      Description: Optional. File size in bytes
  - name: StickerSet
    children: []
    desc:
    - name: p
      content: This object represents a sticker set.
    table:
    - Field: name
      Type: String
      Description: Sticker set name
    - Field: title
      Type: String
      Description: Sticker set title
    - Field: sticker_type
      Type: String
      Description: Type of stickers in the set, currently one of âregularâ, âmaskâ, âcustom_emojiâ
    - Field: is_animated
      Type: Boolean
      Description: True, if the sticker set contains animated stickers
    - Field: is_video
      Type: Boolean
      Description: True, if the sticker set contains video stickers
    - Field: stickers
      Type: Array of Sticker
      Description: List of all set stickers
    - Field: thumbnail
      Type: PhotoSize
      Description: Optional. Sticker set thumbnail in the .WEBP, .TGS, or .WEBM format
  - name: MaskPosition
    children: []
    desc:
    - name: p
      content: This object describes the position on faces where a mask should be placed by default.
    table:
    - Field: point
      Type: String
      Description: The part of the face relative to which the mask should be placed. One of âforeheadâ, âeyesâ, âmouthâ, or âchinâ.
    - Field: x_shift
      Type: Float number
      Description: Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position.
    - Field: y_shift
      Type: Float number
      Description: Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position.
    - Field: scale
      Type: Float number
      Description: Mask scaling coefficient. For example, 2.0 means double size.
  - name: InputSticker
    children: []
    desc:
    - name: p
      content: This object describes a sticker to be added to a sticker set.
    table:
    - Field: sticker
      Type: InputFile or String
      Description: The added sticker. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, upload a new one using multipart/form-data, or pass âattach://<file_attach_name>â to upload a new one using multipart/form-data under <file_attach_name> name. Animated and video stickers can't be uploaded via HTTP URL. More information on Sending Files Â»
    - Field: emoji_list
      Type: Array of String
      Description: List of 1-20 emoji associated with the sticker
    - Field: mask_position
      Type: MaskPosition
      Description: Optional. Position where the mask should be placed on faces. For âmaskâ stickers only.
    - Field: keywords
      Type: Array of String
      Description: Optional. List of 0-20 search keywords for the sticker with total length of up to 64 characters. For âregularâ and âcustom_emojiâ stickers only.
  - name: sendSticker
    children: []
    desc:
    - name: p
      content: Use this method to send static .WEBP, animated .TGS, or video .WEBM stickers. On success, the sent Message is returned.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_thread_id
      Type: Integer
      Required: Optional
      Description: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
    - Parameter: sticker
      Type: InputFile or String
      Required: 'Yes'
      Description: Sticker to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a .WEBP sticker from the Internet, or upload a new .WEBP or .TGS sticker using multipart/form-data. More information on Sending Files Â». Video stickers can only be sent by a file_id. Animated stickers can't be sent via an HTTP URL.
    - Parameter: emoji
      Type: String
      Required: Optional
      Description: Emoji associated with the sticker; only for just uploaded stickers
    - Parameter: disable_notification
      Type: Boolean
      Required: Optional
      Description: Sends the message silently. Users will receive a notification with no sound.
    - Parameter: protect_content
      Type: Boolean
      Required: Optional
      Description: Protects the contents of the sent message from forwarding and saving
    - Parameter: reply_to_message_id
      Type: Integer
      Required: Optional
      Description: If the message is a reply, ID of the original message
    - Parameter: allow_sending_without_reply
      Type: Boolean
      Required: Optional
      Description: Pass True if the message should be sent even if the specified replied-to message is not found
    - Parameter: reply_markup
      Type: InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply
      Required: Optional
      Description: Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.
  - name: getStickerSet
    children: []
    desc:
    - name: p
      content: Use this method to get a sticker set. On success, a StickerSet object is returned.
    table:
    - Parameter: name
      Type: String
      Required: 'Yes'
      Description: Name of the sticker set
  - name: getCustomEmojiStickers
    children: []
    desc:
    - name: p
      content: Use this method to get information about custom emoji stickers by their identifiers. Returns an Array of Sticker objects.
    table:
    - Parameter: custom_emoji_ids
      Type: Array of String
      Required: 'Yes'
      Description: List of custom emoji identifiers. At most 200 custom emoji identifiers can be specified.
  - name: uploadStickerFile
    children: []
    desc:
    - name: p
      content: Use this method to upload a file with a sticker for later use in the createNewStickerSet and addStickerToSet methods (the file can be used multiple times). Returns the uploaded File on success.
    table:
    - Parameter: user_id
      Type: Integer
      Required: 'Yes'
      Description: User identifier of sticker file owner
    - Parameter: sticker
      Type: InputFile
      Required: 'Yes'
      Description: A file with the sticker in .WEBP, .PNG, .TGS, or .WEBM format. See https://core.telegram.org/stickers for technical requirements. More information on Sending Files Â»
    - Parameter: sticker_format
      Type: String
      Required: 'Yes'
      Description: Format of the sticker, must be one of âstaticâ, âanimatedâ, âvideoâ
  - name: createNewStickerSet
    children: []
    desc:
    - name: p
      content: Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. Returns True on success.
    table:
    - Parameter: user_id
      Type: Integer
      Required: 'Yes'
      Description: User identifier of created sticker set owner
    - Parameter: name
      Type: String
      Required: 'Yes'
      Description: Short name of sticker set, to be used in t.me/addstickers/ URLs (e.g., animals). Can contain only English letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and must end in "_by_<bot_username>". <bot_username> is case insensitive. 1-64 characters.
    - Parameter: title
      Type: String
      Required: 'Yes'
      Description: Sticker set title, 1-64 characters
    - Parameter: stickers
      Type: Array of InputSticker
      Required: 'Yes'
      Description: A JSON-serialized list of 1-50 initial stickers to be added to the sticker set
    - Parameter: sticker_format
      Type: String
      Required: 'Yes'
      Description: Format of stickers in the set, must be one of âstaticâ, âanimatedâ, âvideoâ
    - Parameter: sticker_type
      Type: String
      Required: Optional
      Description: Type of stickers in the set, pass âregularâ, âmaskâ, or âcustom_emojiâ. By default, a regular sticker set is created.
    - Parameter: needs_repainting
      Type: Boolean
      Required: Optional
      Description: Pass True if stickers in the sticker set must be repainted to the color of text when used in messages, the accent color if used as emoji status, white on chat photos, or another appropriate color based on context; for custom emoji sticker sets only
  - name: addStickerToSet
    children: []
    desc:
    - name: p
      content: Use this method to add a new sticker to a set created by the bot. The format of the added sticker must match the format of the other stickers in the set. Emoji sticker sets can have up to 200 stickers. Animated and video sticker sets can have up to 50 stickers. Static sticker sets can have up to 120 stickers. Returns True on success.
    table:
    - Parameter: user_id
      Type: Integer
      Required: 'Yes'
      Description: User identifier of sticker set owner
    - Parameter: name
      Type: String
      Required: 'Yes'
      Description: Sticker set name
    - Parameter: sticker
      Type: InputSticker
      Required: 'Yes'
      Description: A JSON-serialized object with information about the added sticker. If exactly the same sticker had already been added to the set, then the set isn't changed.
  - name: setStickerPositionInSet
    children: []
    desc:
    - name: p
      content: Use this method to move a sticker in a set created by the bot to a specific position. Returns True on success.
    table:
    - Parameter: sticker
      Type: String
      Required: 'Yes'
      Description: File identifier of the sticker
    - Parameter: position
      Type: Integer
      Required: 'Yes'
      Description: New sticker position in the set, zero-based
  - name: deleteStickerFromSet
    children: []
    desc:
    - name: p
      content: Use this method to delete a sticker from a set created by the bot. Returns True on success.
    table:
    - Parameter: sticker
      Type: String
      Required: 'Yes'
      Description: File identifier of the sticker
  - name: setStickerEmojiList
    children: []
    desc:
    - name: p
      content: Use this method to change the list of emoji assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns True on success.
    table:
    - Parameter: sticker
      Type: String
      Required: 'Yes'
      Description: File identifier of the sticker
    - Parameter: emoji_list
      Type: Array of String
      Required: 'Yes'
      Description: A JSON-serialized list of 1-20 emoji associated with the sticker
  - name: setStickerKeywords
    children: []
    desc:
    - name: p
      content: Use this method to change search keywords assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns True on success.
    table:
    - Parameter: sticker
      Type: String
      Required: 'Yes'
      Description: File identifier of the sticker
    - Parameter: keywords
      Type: Array of String
      Required: Optional
      Description: A JSON-serialized list of 0-20 search keywords for the sticker with total length of up to 64 characters
  - name: setStickerMaskPosition
    children: []
    desc:
    - name: p
      content: Use this method to change the mask position of a mask sticker. The sticker must belong to a sticker set that was created by the bot. Returns True on success.
    table:
    - Parameter: sticker
      Type: String
      Required: 'Yes'
      Description: File identifier of the sticker
    - Parameter: mask_position
      Type: MaskPosition
      Required: Optional
      Description: A JSON-serialized object with the position where the mask should be placed on faces. Omit the parameter to remove the mask position.
  - name: setStickerSetTitle
    children: []
    desc:
    - name: p
      content: Use this method to set the title of a created sticker set. Returns True on success.
    table:
    - Parameter: name
      Type: String
      Required: 'Yes'
      Description: Sticker set name
    - Parameter: title
      Type: String
      Required: 'Yes'
      Description: Sticker set title, 1-64 characters
  - name: setStickerSetThumbnail
    children: []
    desc:
    - name: p
      content: Use this method to set the thumbnail of a regular or mask sticker set. The format of the thumbnail file must match the format of the stickers in the set. Returns True on success.
    table:
    - Parameter: name
      Type: String
      Required: 'Yes'
      Description: Sticker set name
    - Parameter: user_id
      Type: Integer
      Required: 'Yes'
      Description: User identifier of the sticker set owner
    - Parameter: thumbnail
      Type: InputFile or String
      Required: Optional
      Description: A .WEBP or .PNG image with the thumbnail, must be up to 128 kilobytes in size and have a width and height of exactly 100px, or a .TGS animation with a thumbnail up to 32 kilobytes in size (see https://core.telegram.org/stickers#animated-sticker-requirements for animated sticker technical requirements), or a WEBM video with the thumbnail up to 32 kilobytes in size; see https://core.telegram.org/stickers#video-sticker-requirements for video sticker technical requirements. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More information on Sending Files Â». Animated and video sticker set thumbnails can't be uploaded via HTTP URL. If omitted, then the thumbnail is dropped and the first sticker is used as the thumbnail.
  - name: setCustomEmojiStickerSetThumbnail
    children: []
    desc:
    - name: p
      content: Use this method to set the thumbnail of a custom emoji sticker set. Returns True on success.
    table:
    - Parameter: name
      Type: String
      Required: 'Yes'
      Description: Sticker set name
    - Parameter: custom_emoji_id
      Type: String
      Required: Optional
      Description: Custom emoji identifier of a sticker from the sticker set; pass an empty string to drop the thumbnail and use the first sticker as the thumbnail.
  - name: deleteStickerSet
    children: []
    desc:
    - name: p
      content: Use this method to delete a sticker set that was created by the bot. Returns True on success.
    table:
    - Parameter: name
      Type: String
      Required: 'Yes'
      Description: Sticker set name
  desc:
  - name: p
    content: The following methods and objects allow your bot to handle stickers and sticker sets.
- name: Inline mode
  children:
  - name: InlineQuery
    children: []
    desc:
    - name: p
      content: This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.
    table:
    - Field: id
      Type: String
      Description: Unique identifier for this query
    - Field: from
      Type: User
      Description: Sender
    - Field: query
      Type: String
      Description: Text of the query (up to 256 characters)
    - Field: offset
      Type: String
      Description: Offset of the results to be returned, can be controlled by the bot
    - Field: chat_type
      Type: String
      Description: Optional. Type of the chat from which the inline query was sent. Can be either âsenderâ for a private chat with the inline query sender, âprivateâ, âgroupâ, âsupergroupâ, or âchannelâ. The chat type should be always known for requests sent from official clients and most third-party clients, unless the request was sent from a secret chat
    - Field: location
      Type: Location
      Description: Optional. Sender location, only for bots that request user location
  - name: answerInlineQuery
    children: []
    desc:
    - name: p
      content: Use this method to send answers to an inline query. On success, True is returned.No more than 50 results per query are allowed.
    table:
    - Parameter: inline_query_id
      Type: String
      Required: 'Yes'
      Description: Unique identifier for the answered query
    - Parameter: results
      Type: Array of InlineQueryResult
      Required: 'Yes'
      Description: A JSON-serialized array of results for the inline query
    - Parameter: cache_time
      Type: Integer
      Required: Optional
      Description: The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
    - Parameter: is_personal
      Type: Boolean
      Required: Optional
      Description: Pass True if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query
    - Parameter: next_offset
      Type: String
      Required: Optional
      Description: Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.
    - Parameter: switch_pm_text
      Type: String
      Required: Optional
      Description: If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter switch_pm_parameter
    - Parameter: switch_pm_parameter
      Type: String
      Required: Optional
      Description: 'Deep-linking parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only A-Z, a-z, 0-9, _ and - are allowed.Example: An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a ''Connect your YouTube account'' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an OAuth link. Once done, the bot can offer a switch_inline button so that the user can easily return to the chat where they wanted to use the bot''s inline capabilities.'
  - name: InlineQueryResult
    children: []
    desc:
    - name: p
      content: 'This object represents one result of an inline query. Telegram clients currently support results of the following 20 types:'
    - name: ul
      content:
      - InlineQueryResultCachedAudio
      - InlineQueryResultCachedDocument
      - InlineQueryResultCachedGif
      - InlineQueryResultCachedMpeg4Gif
      - InlineQueryResultCachedPhoto
      - InlineQueryResultCachedSticker
      - InlineQueryResultCachedVideo
      - InlineQueryResultCachedVoice
      - InlineQueryResultArticle
      - InlineQueryResultAudio
      - InlineQueryResultContact
      - InlineQueryResultGame
      - InlineQueryResultDocument
      - InlineQueryResultGif
      - InlineQueryResultLocation
      - InlineQueryResultMpeg4Gif
      - InlineQueryResultPhoto
      - InlineQueryResultVenue
      - InlineQueryResultVideo
      - InlineQueryResultVoice
    - name: p
      content: 'Note: All URLs passed in inline query results will be available to end users and therefore must be assumed to be public.'
  - name: InlineQueryResultArticle
    children: []
    desc:
    - name: p
      content: Represents a link to an article or web page.
    table:
    - Field: type
      Type: String
      Description: Type of the result, must be article
    - Field: id
      Type: String
      Description: Unique identifier for this result, 1-64 Bytes
    - Field: title
      Type: String
      Description: Title of the result
    - Field: input_message_content
      Type: InputMessageContent
      Description: Content of the message to be sent
    - Field: reply_markup
      Type: InlineKeyboardMarkup
      Description: Optional. Inline keyboard attached to the message
    - Field: url
      Type: String
      Description: Optional. URL of the result
    - Field: hide_url
      Type: Boolean
      Description: Optional. Pass True if you don't want the URL to be shown in the message
    - Field: description
      Type: String
      Description: Optional. Short description of the result
    - Field: thumbnail_url
      Type: String
      Description: Optional. Url of the thumbnail for the result
    - Field: thumbnail_width
      Type: Integer
      Description: Optional. Thumbnail width
    - Field: thumbnail_height
      Type: Integer
      Description: Optional. Thumbnail height
  - name: InlineQueryResultPhoto
    children: []
    desc:
    - name: p
      content: Represents a link to a photo. By default, this photo will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the photo.
    table:
    - Field: type
      Type: String
      Description: Type of the result, must be photo
    - Field: id
      Type: String
      Description: Unique identifier for this result, 1-64 bytes
    - Field: photo_url
      Type: String
      Description: A valid URL of the photo. Photo must be in JPEG format. Photo size must not exceed 5MB
    - Field: thumbnail_url
      Type: String
      Description: URL of the thumbnail for the photo
    - Field: photo_width
      Type: Integer
      Description: Optional. Width of the photo
    - Field: photo_height
      Type: Integer
      Description: Optional. Height of the photo
    - Field: title
      Type: String
      Description: Optional. Title for the result
    - Field: description
      Type: String
      Description: Optional. Short description of the result
    - Field: caption
      Type: String
      Description: Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing
    - Field: parse_mode
      Type: String
      Description: Optional. Mode for parsing entities in the photo caption. See formatting options for more details.
    - Field: caption_entities
      Type: Array of MessageEntity
      Description: Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
    - Field: reply_markup
      Type: InlineKeyboardMarkup
      Description: Optional. Inline keyboard attached to the message
    - Field: input_message_content
      Type: InputMessageContent
      Description: Optional. Content of the message to be sent instead of the photo
  - name: InlineQueryResultGif
    children: []
    desc:
    - name: p
      content: Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.
    table:
    - Field: type
      Type: String
      Description: Type of the result, must be gif
    - Field: id
      Type: String
      Description: Unique identifier for this result, 1-64 bytes
    - Field: gif_url
      Type: String
      Description: A valid URL for the GIF file. File size must not exceed 1MB
    - Field: gif_width
      Type: Integer
      Description: Optional. Width of the GIF
    - Field: gif_height
      Type: Integer
      Description: Optional. Height of the GIF
    - Field: gif_duration
      Type: Integer
      Description: Optional. Duration of the GIF in seconds
    - Field: thumbnail_url
      Type: String
      Description: URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
    - Field: thumbnail_mime_type
      Type: String
      Description: Optional. MIME type of the thumbnail, must be one of âimage/jpegâ, âimage/gifâ, or âvideo/mp4â. Defaults to âimage/jpegâ
    - Field: title
      Type: String
      Description: Optional. Title for the result
    - Field: caption
      Type: String
      Description: Optional. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
    - Field: parse_mode
      Type: String
      Description: Optional. Mode for parsing entities in the caption. See formatting options for more details.
    - Field: caption_entities
      Type: Array of MessageEntity
      Description: Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
    - Field: reply_markup
      Type: InlineKeyboardMarkup
      Description: Optional. Inline keyboard attached to the message
    - Field: input_message_content
      Type: InputMessageContent
      Description: Optional. Content of the message to be sent instead of the GIF animation
  - name: InlineQueryResultMpeg4Gif
    children: []
    desc:
    - name: p
      content: Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.
    table:
    - Field: type
      Type: String
      Description: Type of the result, must be mpeg4_gif
    - Field: id
      Type: String
      Description: Unique identifier for this result, 1-64 bytes
    - Field: mpeg4_url
      Type: String
      Description: A valid URL for the MPEG4 file. File size must not exceed 1MB
    - Field: mpeg4_width
      Type: Integer
      Description: Optional. Video width
    - Field: mpeg4_height
      Type: Integer
      Description: Optional. Video height
    - Field: mpeg4_duration
      Type: Integer
      Description: Optional. Video duration in seconds
    - Field: thumbnail_url
      Type: String
      Description: URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
    - Field: thumbnail_mime_type
      Type: String
      Description: Optional. MIME type of the thumbnail, must be one of âimage/jpegâ, âimage/gifâ, or âvideo/mp4â. Defaults to âimage/jpegâ
    - Field: title
      Type: String
      Description: Optional. Title for the result
    - Field: caption
      Type: String
      Description: Optional. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
    - Field: parse_mode
      Type: String
      Description: Optional. Mode for parsing entities in the caption. See formatting options for more details.
    - Field: caption_entities
      Type: Array of MessageEntity
      Description: Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
    - Field: reply_markup
      Type: InlineKeyboardMarkup
      Description: Optional. Inline keyboard attached to the message
    - Field: input_message_content
      Type: InputMessageContent
      Description: Optional. Content of the message to be sent instead of the video animation
  - name: InlineQueryResultVideo
    children: []
    desc:
    - name: p
      content: Represents a link to a page containing an embedded video player or a video file. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the video.
    - name: blockquote
      content: If an InlineQueryResultVideo message contains an embedded video (e.g., YouTube), you must replace its content using input_message_content.
    table:
    - Field: type
      Type: String
      Description: Type of the result, must be video
    - Field: id
      Type: String
      Description: Unique identifier for this result, 1-64 bytes
    - Field: video_url
      Type: String
      Description: A valid URL for the embedded video player or video file
    - Field: mime_type
      Type: String
      Description: MIME type of the content of the video URL, âtext/htmlâ or âvideo/mp4â
    - Field: thumbnail_url
      Type: String
      Description: URL of the thumbnail (JPEG only) for the video
    - Field: title
      Type: String
      Description: Title for the result
    - Field: caption
      Type: String
      Description: Optional. Caption of the video to be sent, 0-1024 characters after entities parsing
    - Field: parse_mode
      Type: String
      Description: Optional. Mode for parsing entities in the video caption. See formatting options for more details.
    - Field: caption_entities
      Type: Array of MessageEntity
      Description: Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
    - Field: video_width
      Type: Integer
      Description: Optional. Video width
    - Field: video_height
      Type: Integer
      Description: Optional. Video height
    - Field: video_duration
      Type: Integer
      Description: Optional. Video duration in seconds
    - Field: description
      Type: String
      Description: Optional. Short description of the result
    - Field: reply_markup
      Type: InlineKeyboardMarkup
      Description: Optional. Inline keyboard attached to the message
    - Field: input_message_content
      Type: InputMessageContent
      Description: Optional. Content of the message to be sent instead of the video. This field is required if InlineQueryResultVideo is used to send an HTML-page as a result (e.g., a YouTube video).
  - name: InlineQueryResultAudio
    children: []
    desc:
    - name: p
      content: Represents a link to an MP3 audio file. By default, this audio file will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the audio.
    - name: p
      content: 'Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.'
    table:
    - Field: type
      Type: String
      Description: Type of the result, must be audio
    - Field: id
      Type: String
      Description: Unique identifier for this result, 1-64 bytes
    - Field: audio_url
      Type: String
      Description: A valid URL for the audio file
    - Field: title
      Type: String
      Description: Title
    - Field: caption
      Type: String
      Description: Optional. Caption, 0-1024 characters after entities parsing
    - Field: parse_mode
      Type: String
      Description: Optional. Mode for parsing entities in the audio caption. See formatting options for more details.
    - Field: caption_entities
      Type: Array of MessageEntity
      Description: Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
    - Field: performer
      Type: String
      Description: Optional. Performer
    - Field: audio_duration
      Type: Integer
      Description: Optional. Audio duration in seconds
    - Field: reply_markup
      Type: InlineKeyboardMarkup
      Description: Optional. Inline keyboard attached to the message
    - Field: input_message_content
      Type: InputMessageContent
      Description: Optional. Content of the message to be sent instead of the audio
  - name: InlineQueryResultVoice
    children: []
    desc:
    - name: p
      content: Represents a link to a voice recording in an .OGG container encoded with OPUS. By default, this voice recording will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the the voice message.
    - name: p
      content: 'Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.'
    table:
    - Field: type
      Type: String
      Description: Type of the result, must be voice
    - Field: id
      Type: String
      Description: Unique identifier for this result, 1-64 bytes
    - Field: voice_url
      Type: String
      Description: A valid URL for the voice recording
    - Field: title
      Type: String
      Description: Recording title
    - Field: caption
      Type: String
      Description: Optional. Caption, 0-1024 characters after entities parsing
    - Field: parse_mode
      Type: String
      Description: Optional. Mode for parsing entities in the voice message caption. See formatting options for more details.
    - Field: caption_entities
      Type: Array of MessageEntity
      Description: Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
    - Field: voice_duration
      Type: Integer
      Description: Optional. Recording duration in seconds
    - Field: reply_markup
      Type: InlineKeyboardMarkup
      Description: Optional. Inline keyboard attached to the message
    - Field: input_message_content
      Type: InputMessageContent
      Description: Optional. Content of the message to be sent instead of the voice recording
  - name: InlineQueryResultDocument
    children: []
    desc:
    - name: p
      content: Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the file. Currently, only .PDF and .ZIP files can be sent using this method.
    - name: p
      content: 'Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.'
    table:
    - Field: type
      Type: String
      Description: Type of the result, must be document
    - Field: id
      Type: String
      Description: Unique identifier for this result, 1-64 bytes
    - Field: title
      Type: String
      Description: Title for the result
    - Field: caption
      Type: String
      Description: Optional. Caption of the document to be sent, 0-1024 characters after entities parsing
    - Field: parse_mode
      Type: String
      Description: Optional. Mode for parsing entities in the document caption. See formatting options for more details.
    - Field: caption_entities
      Type: Array of MessageEntity
      Description: Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
    - Field: document_url
      Type: String
      Description: A valid URL for the file
    - Field: mime_type
      Type: String
      Description: MIME type of the content of the file, either âapplication/pdfâ or âapplication/zipâ
    - Field: description
      Type: String
      Description: Optional. Short description of the result
    - Field: reply_markup
      Type: InlineKeyboardMarkup
      Description: Optional. Inline keyboard attached to the message
    - Field: input_message_content
      Type: InputMessageContent
      Description: Optional. Content of the message to be sent instead of the file
    - Field: thumbnail_url
      Type: String
      Description: Optional. URL of the thumbnail (JPEG only) for the file
    - Field: thumbnail_width
      Type: Integer
      Description: Optional. Thumbnail width
    - Field: thumbnail_height
      Type: Integer
      Description: Optional. Thumbnail height
  - name: InlineQueryResultLocation
    children: []
    desc:
    - name: p
      content: Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the location.
    - name: p
      content: 'Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.'
    table:
    - Field: type
      Type: String
      Description: Type of the result, must be location
    - Field: id
      Type: String
      Description: Unique identifier for this result, 1-64 Bytes
    - Field: latitude
      Type: Float number
      Description: Location latitude in degrees
    - Field: longitude
      Type: Float number
      Description: Location longitude in degrees
    - Field: title
      Type: String
      Description: Location title
    - Field: horizontal_accuracy
      Type: Float number
      Description: Optional. The radius of uncertainty for the location, measured in meters; 0-1500
    - Field: live_period
      Type: Integer
      Description: Optional. Period in seconds for which the location can be updated, should be between 60 and 86400.
    - Field: heading
      Type: Integer
      Description: Optional. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
    - Field: proximity_alert_radius
      Type: Integer
      Description: Optional. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
    - Field: reply_markup
      Type: InlineKeyboardMarkup
      Description: Optional. Inline keyboard attached to the message
    - Field: input_message_content
      Type: InputMessageContent
      Description: Optional. Content of the message to be sent instead of the location
    - Field: thumbnail_url
      Type: String
      Description: Optional. Url of the thumbnail for the result
    - Field: thumbnail_width
      Type: Integer
      Description: Optional. Thumbnail width
    - Field: thumbnail_height
      Type: Integer
      Description: Optional. Thumbnail height
  - name: InlineQueryResultVenue
    children: []
    desc:
    - name: p
      content: Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the venue.
    - name: p
      content: 'Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.'
    table:
    - Field: type
      Type: String
      Description: Type of the result, must be venue
    - Field: id
      Type: String
      Description: Unique identifier for this result, 1-64 Bytes
    - Field: latitude
      Type: Float
      Description: Latitude of the venue location in degrees
    - Field: longitude
      Type: Float
      Description: Longitude of the venue location in degrees
    - Field: title
      Type: String
      Description: Title of the venue
    - Field: address
      Type: String
      Description: Address of the venue
    - Field: foursquare_id
      Type: String
      Description: Optional. Foursquare identifier of the venue if known
    - Field: foursquare_type
      Type: String
      Description: Optional. Foursquare type of the venue, if known. (For example, âarts_entertainment/defaultâ, âarts_entertainment/aquariumâ or âfood/icecreamâ.)
    - Field: google_place_id
      Type: String
      Description: Optional. Google Places identifier of the venue
    - Field: google_place_type
      Type: String
      Description: Optional. Google Places type of the venue. (See supported types.)
    - Field: reply_markup
      Type: InlineKeyboardMarkup
      Description: Optional. Inline keyboard attached to the message
    - Field: input_message_content
      Type: InputMessageContent
      Description: Optional. Content of the message to be sent instead of the venue
    - Field: thumbnail_url
      Type: String
      Description: Optional. Url of the thumbnail for the result
    - Field: thumbnail_width
      Type: Integer
      Description: Optional. Thumbnail width
    - Field: thumbnail_height
      Type: Integer
      Description: Optional. Thumbnail height
  - name: InlineQueryResultContact
    children: []
    desc:
    - name: p
      content: Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the contact.
    - name: p
      content: 'Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.'
    table:
    - Field: type
      Type: String
      Description: Type of the result, must be contact
    - Field: id
      Type: String
      Description: Unique identifier for this result, 1-64 Bytes
    - Field: phone_number
      Type: String
      Description: Contact's phone number
    - Field: first_name
      Type: String
      Description: Contact's first name
    - Field: last_name
      Type: String
      Description: Optional. Contact's last name
    - Field: vcard
      Type: String
      Description: Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes
    - Field: reply_markup
      Type: InlineKeyboardMarkup
      Description: Optional. Inline keyboard attached to the message
    - Field: input_message_content
      Type: InputMessageContent
      Description: Optional. Content of the message to be sent instead of the contact
    - Field: thumbnail_url
      Type: String
      Description: Optional. Url of the thumbnail for the result
    - Field: thumbnail_width
      Type: Integer
      Description: Optional. Thumbnail width
    - Field: thumbnail_height
      Type: Integer
      Description: Optional. Thumbnail height
  - name: InlineQueryResultGame
    children: []
    desc:
    - name: p
      content: Represents a Game.
    - name: p
      content: 'Note: This will only work in Telegram versions released after October 1, 2016. Older clients will not display any inline results if a game result is among them.'
    table:
    - Field: type
      Type: String
      Description: Type of the result, must be game
    - Field: id
      Type: String
      Description: Unique identifier for this result, 1-64 bytes
    - Field: game_short_name
      Type: String
      Description: Short name of the game
    - Field: reply_markup
      Type: InlineKeyboardMarkup
      Description: Optional. Inline keyboard attached to the message
  - name: InlineQueryResultCachedPhoto
    children: []
    desc:
    - name: p
      content: Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the photo.
    table:
    - Field: type
      Type: String
      Description: Type of the result, must be photo
    - Field: id
      Type: String
      Description: Unique identifier for this result, 1-64 bytes
    - Field: photo_file_id
      Type: String
      Description: A valid file identifier of the photo
    - Field: title
      Type: String
      Description: Optional. Title for the result
    - Field: description
      Type: String
      Description: Optional. Short description of the result
    - Field: caption
      Type: String
      Description: Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing
    - Field: parse_mode
      Type: String
      Description: Optional. Mode for parsing entities in the photo caption. See formatting options for more details.
    - Field: caption_entities
      Type: Array of MessageEntity
      Description: Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
    - Field: reply_markup
      Type: InlineKeyboardMarkup
      Description: Optional. Inline keyboard attached to the message
    - Field: input_message_content
      Type: InputMessageContent
      Description: Optional. Content of the message to be sent instead of the photo
  - name: InlineQueryResultCachedGif
    children: []
    desc:
    - name: p
      content: Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with specified content instead of the animation.
    table:
    - Field: type
      Type: String
      Description: Type of the result, must be gif
    - Field: id
      Type: String
      Description: Unique identifier for this result, 1-64 bytes
    - Field: gif_file_id
      Type: String
      Description: A valid file identifier for the GIF file
    - Field: title
      Type: String
      Description: Optional. Title for the result
    - Field: caption
      Type: String
      Description: Optional. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
    - Field: parse_mode
      Type: String
      Description: Optional. Mode for parsing entities in the caption. See formatting options for more details.
    - Field: caption_entities
      Type: Array of MessageEntity
      Description: Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
    - Field: reply_markup
      Type: InlineKeyboardMarkup
      Description: Optional. Inline keyboard attached to the message
    - Field: input_message_content
      Type: InputMessageContent
      Description: Optional. Content of the message to be sent instead of the GIF animation
  - name: InlineQueryResultCachedMpeg4Gif
    children: []
    desc:
    - name: p
      content: Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.
    table:
    - Field: type
      Type: String
      Description: Type of the result, must be mpeg4_gif
    - Field: id
      Type: String
      Description: Unique identifier for this result, 1-64 bytes
    - Field: mpeg4_file_id
      Type: String
      Description: A valid file identifier for the MPEG4 file
    - Field: title
      Type: String
      Description: Optional. Title for the result
    - Field: caption
      Type: String
      Description: Optional. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
    - Field: parse_mode
      Type: String
      Description: Optional. Mode for parsing entities in the caption. See formatting options for more details.
    - Field: caption_entities
      Type: Array of MessageEntity
      Description: Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
    - Field: reply_markup
      Type: InlineKeyboardMarkup
      Description: Optional. Inline keyboard attached to the message
    - Field: input_message_content
      Type: InputMessageContent
      Description: Optional. Content of the message to be sent instead of the video animation
  - name: InlineQueryResultCachedSticker
    children: []
    desc:
    - name: p
      content: Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the sticker.
    - name: p
      content: 'Note: This will only work in Telegram versions released after 9 April, 2016 for static stickers and after 06 July, 2019 for animated stickers. Older clients will ignore them.'
    table:
    - Field: type
      Type: String
      Description: Type of the result, must be sticker
    - Field: id
      Type: String
      Description: Unique identifier for this result, 1-64 bytes
    - Field: sticker_file_id
      Type: String
      Description: A valid file identifier of the sticker
    - Field: reply_markup
      Type: InlineKeyboardMarkup
      Description: Optional. Inline keyboard attached to the message
    - Field: input_message_content
      Type: InputMessageContent
      Description: Optional. Content of the message to be sent instead of the sticker
  - name: InlineQueryResultCachedDocument
    children: []
    desc:
    - name: p
      content: Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the file.
    - name: p
      content: 'Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.'
    table:
    - Field: type
      Type: String
      Description: Type of the result, must be document
    - Field: id
      Type: String
      Description: Unique identifier for this result, 1-64 bytes
    - Field: title
      Type: String
      Description: Title for the result
    - Field: document_file_id
      Type: String
      Description: A valid file identifier for the file
    - Field: description
      Type: String
      Description: Optional. Short description of the result
    - Field: caption
      Type: String
      Description: Optional. Caption of the document to be sent, 0-1024 characters after entities parsing
    - Field: parse_mode
      Type: String
      Description: Optional. Mode for parsing entities in the document caption. See formatting options for more details.
    - Field: caption_entities
      Type: Array of MessageEntity
      Description: Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
    - Field: reply_markup
      Type: InlineKeyboardMarkup
      Description: Optional. Inline keyboard attached to the message
    - Field: input_message_content
      Type: InputMessageContent
      Description: Optional. Content of the message to be sent instead of the file
  - name: InlineQueryResultCachedVideo
    children: []
    desc:
    - name: p
      content: Represents a link to a video file stored on the Telegram servers. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the video.
    table:
    - Field: type
      Type: String
      Description: Type of the result, must be video
    - Field: id
      Type: String
      Description: Unique identifier for this result, 1-64 bytes
    - Field: video_file_id
      Type: String
      Description: A valid file identifier for the video file
    - Field: title
      Type: String
      Description: Title for the result
    - Field: description
      Type: String
      Description: Optional. Short description of the result
    - Field: caption
      Type: String
      Description: Optional. Caption of the video to be sent, 0-1024 characters after entities parsing
    - Field: parse_mode
      Type: String
      Description: Optional. Mode for parsing entities in the video caption. See formatting options for more details.
    - Field: caption_entities
      Type: Array of MessageEntity
      Description: Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
    - Field: reply_markup
      Type: InlineKeyboardMarkup
      Description: Optional. Inline keyboard attached to the message
    - Field: input_message_content
      Type: InputMessageContent
      Description: Optional. Content of the message to be sent instead of the video
  - name: InlineQueryResultCachedVoice
    children: []
    desc:
    - name: p
      content: Represents a link to a voice message stored on the Telegram servers. By default, this voice message will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the voice message.
    - name: p
      content: 'Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.'
    table:
    - Field: type
      Type: String
      Description: Type of the result, must be voice
    - Field: id
      Type: String
      Description: Unique identifier for this result, 1-64 bytes
    - Field: voice_file_id
      Type: String
      Description: A valid file identifier for the voice message
    - Field: title
      Type: String
      Description: Voice message title
    - Field: caption
      Type: String
      Description: Optional. Caption, 0-1024 characters after entities parsing
    - Field: parse_mode
      Type: String
      Description: Optional. Mode for parsing entities in the voice message caption. See formatting options for more details.
    - Field: caption_entities
      Type: Array of MessageEntity
      Description: Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
    - Field: reply_markup
      Type: InlineKeyboardMarkup
      Description: Optional. Inline keyboard attached to the message
    - Field: input_message_content
      Type: InputMessageContent
      Description: Optional. Content of the message to be sent instead of the voice message
  - name: InlineQueryResultCachedAudio
    children: []
    desc:
    - name: p
      content: Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio file will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the audio.
    - name: p
      content: 'Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.'
    table:
    - Field: type
      Type: String
      Description: Type of the result, must be audio
    - Field: id
      Type: String
      Description: Unique identifier for this result, 1-64 bytes
    - Field: audio_file_id
      Type: String
      Description: A valid file identifier for the audio file
    - Field: caption
      Type: String
      Description: Optional. Caption, 0-1024 characters after entities parsing
    - Field: parse_mode
      Type: String
      Description: Optional. Mode for parsing entities in the audio caption. See formatting options for more details.
    - Field: caption_entities
      Type: Array of MessageEntity
      Description: Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
    - Field: reply_markup
      Type: InlineKeyboardMarkup
      Description: Optional. Inline keyboard attached to the message
    - Field: input_message_content
      Type: InputMessageContent
      Description: Optional. Content of the message to be sent instead of the audio
  - name: InputMessageContent
    children: []
    desc:
    - name: p
      content: 'This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 5 types:'
    - name: ul
      content:
      - InputTextMessageContent
      - InputLocationMessageContent
      - InputVenueMessageContent
      - InputContactMessageContent
      - InputInvoiceMessageContent
  - name: InputTextMessageContent
    children: []
    desc:
    - name: p
      content: Represents the content of a text message to be sent as the result of an inline query.
    table:
    - Field: message_text
      Type: String
      Description: Text of the message to be sent, 1-4096 characters
    - Field: parse_mode
      Type: String
      Description: Optional. Mode for parsing entities in the message text. See formatting options for more details.
    - Field: entities
      Type: Array of MessageEntity
      Description: Optional. List of special entities that appear in message text, which can be specified instead of parse_mode
    - Field: disable_web_page_preview
      Type: Boolean
      Description: Optional. Disables link previews for links in the sent message
  - name: InputLocationMessageContent
    children: []
    desc:
    - name: p
      content: Represents the content of a location message to be sent as the result of an inline query.
    table:
    - Field: latitude
      Type: Float
      Description: Latitude of the location in degrees
    - Field: longitude
      Type: Float
      Description: Longitude of the location in degrees
    - Field: horizontal_accuracy
      Type: Float number
      Description: Optional. The radius of uncertainty for the location, measured in meters; 0-1500
    - Field: live_period
      Type: Integer
      Description: Optional. Period in seconds for which the location can be updated, should be between 60 and 86400.
    - Field: heading
      Type: Integer
      Description: Optional. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
    - Field: proximity_alert_radius
      Type: Integer
      Description: Optional. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
  - name: InputVenueMessageContent
    children: []
    desc:
    - name: p
      content: Represents the content of a venue message to be sent as the result of an inline query.
    table:
    - Field: latitude
      Type: Float
      Description: Latitude of the venue in degrees
    - Field: longitude
      Type: Float
      Description: Longitude of the venue in degrees
    - Field: title
      Type: String
      Description: Name of the venue
    - Field: address
      Type: String
      Description: Address of the venue
    - Field: foursquare_id
      Type: String
      Description: Optional. Foursquare identifier of the venue, if known
    - Field: foursquare_type
      Type: String
      Description: Optional. Foursquare type of the venue, if known. (For example, âarts_entertainment/defaultâ, âarts_entertainment/aquariumâ or âfood/icecreamâ.)
    - Field: google_place_id
      Type: String
      Description: Optional. Google Places identifier of the venue
    - Field: google_place_type
      Type: String
      Description: Optional. Google Places type of the venue. (See supported types.)
  - name: InputContactMessageContent
    children: []
    desc:
    - name: p
      content: Represents the content of a contact message to be sent as the result of an inline query.
    table:
    - Field: phone_number
      Type: String
      Description: Contact's phone number
    - Field: first_name
      Type: String
      Description: Contact's first name
    - Field: last_name
      Type: String
      Description: Optional. Contact's last name
    - Field: vcard
      Type: String
      Description: Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes
  - name: InputInvoiceMessageContent
    children: []
    desc:
    - name: p
      content: Represents the content of an invoice message to be sent as the result of an inline query.
    table:
    - Field: title
      Type: String
      Description: Product name, 1-32 characters
    - Field: description
      Type: String
      Description: Product description, 1-255 characters
    - Field: payload
      Type: String
      Description: Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
    - Field: provider_token
      Type: String
      Description: Payment provider token, obtained via @BotFather
    - Field: currency
      Type: String
      Description: Three-letter ISO 4217 currency code, see more on currencies
    - Field: prices
      Type: Array of LabeledPrice
      Description: Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
    - Field: max_tip_amount
      Type: Integer
      Description: Optional. The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). For example, for a maximum tip of US$ 1.45 pass max_tip_amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0
    - Field: suggested_tip_amounts
      Type: Array of Integer
      Description: Optional. A JSON-serialized array of suggested amounts of tip in the smallest units of the currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed max_tip_amount.
    - Field: provider_data
      Type: String
      Description: Optional. A JSON-serialized object for data about the invoice, which will be shared with the payment provider. A detailed description of the required fields should be provided by the payment provider.
    - Field: photo_url
      Type: String
      Description: Optional. URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service.
    - Field: photo_size
      Type: Integer
      Description: Optional. Photo size in bytes
    - Field: photo_width
      Type: Integer
      Description: Optional. Photo width
    - Field: photo_height
      Type: Integer
      Description: Optional. Photo height
    - Field: need_name
      Type: Boolean
      Description: Optional. Pass True if you require the user's full name to complete the order
    - Field: need_phone_number
      Type: Boolean
      Description: Optional. Pass True if you require the user's phone number to complete the order
    - Field: need_email
      Type: Boolean
      Description: Optional. Pass True if you require the user's email address to complete the order
    - Field: need_shipping_address
      Type: Boolean
      Description: Optional. Pass True if you require the user's shipping address to complete the order
    - Field: send_phone_number_to_provider
      Type: Boolean
      Description: Optional. Pass True if the user's phone number should be sent to provider
    - Field: send_email_to_provider
      Type: Boolean
      Description: Optional. Pass True if the user's email address should be sent to provider
    - Field: is_flexible
      Type: Boolean
      Description: Optional. Pass True if the final price depends on the shipping method
  - name: ChosenInlineResult
    children: []
    desc:
    - name: p
      content: Represents a result of an inline query that was chosen by the user and sent to their chat partner.
    - name: p
      content: 'Note: It is necessary to enable inline feedback via @BotFather in order to receive these objects in updates.'
    table:
    - Field: result_id
      Type: String
      Description: The unique identifier for the result that was chosen
    - Field: from
      Type: User
      Description: The user that chose the result
    - Field: location
      Type: Location
      Description: Optional. Sender location, only for bots that require user location
    - Field: inline_message_id
      Type: String
      Description: Optional. Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. Will be also received in callback queries and can be used to edit the message.
    - Field: query
      Type: String
      Description: The query that was used to obtain the result
  - name: answerWebAppQuery
    children: []
    desc:
    - name: p
      content: Use this method to set the result of an interaction with a Web App and send a corresponding message on behalf of the user to the chat from which the query originated. On success, a SentWebAppMessage object is returned.
    table:
    - Parameter: web_app_query_id
      Type: String
      Required: 'Yes'
      Description: Unique identifier for the query to be answered
    - Parameter: result
      Type: InlineQueryResult
      Required: 'Yes'
      Description: A JSON-serialized object describing the message to be sent
  - name: SentWebAppMessage
    children: []
    desc:
    - name: p
      content: Describes an inline message sent by a Web App on behalf of a user.
    table:
    - Field: inline_message_id
      Type: String
      Description: Optional. Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message.
  desc:
  - name: p
    content: The following methods and objects allow your bot to work in inline mode.Please see our Introduction to Inline bots for more details.
  - name: p
    content: To enable this option, send the /setinline command to @BotFather and provide the placeholder text that the user will see in the input field after typing your bot's name.
- name: Payments
  children:
  - name: sendInvoice
    children: []
    desc:
    - name: p
      content: Use this method to send invoices. On success, the sent Message is returned.
    table:
    - Parameter: chat_id
      Type: Integer or String
      Required: 'Yes'
      Description: Unique identifier for the target chat or username of the target channel (in the format @channelusername)
    - Parameter: message_thread_id
      Type: Integer
      Required: Optional
      Description: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
    - Parameter: title
      Type: String
      Required: 'Yes'
      Description: Product name, 1-32 characters
    - Parameter: description
      Type: String
      Required: 'Yes'
      Description: Product description, 1-255 characters
    - Parameter: payload
      Type: String
      Required: 'Yes'
      Description: Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
    - Parameter: provider_token
      Type: String
      Required: 'Yes'
      Description: Payment provider token, obtained via @BotFather
    - Parameter: currency
      Type: String
      Required: 'Yes'
      Description: Three-letter ISO 4217 currency code, see more on currencies
    - Parameter: prices
      Type: Array of LabeledPrice
      Required: 'Yes'
      Description: Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
    - Parameter: max_tip_amount
      Type: Integer
      Required: Optional
      Description: The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). For example, for a maximum tip of US$ 1.45 pass max_tip_amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0
    - Parameter: suggested_tip_amounts
      Type: Array of Integer
      Required: Optional
      Description: A JSON-serialized array of suggested amounts of tips in the smallest units of the currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed max_tip_amount.
    - Parameter: start_parameter
      Type: String
      Required: Optional
      Description: Unique deep-linking parameter. If left empty, forwarded copies of the sent message will have a Pay button, allowing multiple users to pay directly from the forwarded message, using the same invoice. If non-empty, forwarded copies of the sent message will have a URL button with a deep link to the bot (instead of a Pay button), with the value used as the start parameter
    - Parameter: provider_data
      Type: String
      Required: Optional
      Description: JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
    - Parameter: photo_url
      Type: String
      Required: Optional
      Description: URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
    - Parameter: photo_size
      Type: Integer
      Required: Optional
      Description: Photo size in bytes
    - Parameter: photo_width
      Type: Integer
      Required: Optional
      Description: Photo width
    - Parameter: photo_height
      Type: Integer
      Required: Optional
      Description: Photo height
    - Parameter: need_name
      Type: Boolean
      Required: Optional
      Description: Pass True if you require the user's full name to complete the order
    - Parameter: need_phone_number
      Type: Boolean
      Required: Optional
      Description: Pass True if you require the user's phone number to complete the order
    - Parameter: need_email
      Type: Boolean
      Required: Optional
      Description: Pass True if you require the user's email address to complete the order
    - Parameter: need_shipping_address
      Type: Boolean
      Required: Optional
      Description: Pass True if you require the user's shipping address to complete the order
    - Parameter: send_phone_number_to_provider
      Type: Boolean
      Required: Optional
      Description: Pass True if the user's phone number should be sent to provider
    - Parameter: send_email_to_provider
      Type: Boolean
      Required: Optional
      Description: Pass True if the user's email address should be sent to provider
    - Parameter: is_flexible
      Type: Boolean
      Required: Optional
      Description: Pass True if the final price depends on the shipping method
    - Parameter: disable_notification
      Type: Boolean
      Required: Optional
      Description: Sends the message silently. Users will receive a notification with no sound.
    - Parameter: protect_content
      Type: Boolean
      Required: Optional
      Description: Protects the contents of the sent message from forwarding and saving
    - Parameter: reply_to_message_id
      Type: Integer
      Required: Optional
      Description: If the message is a reply, ID of the original message
    - Parameter: allow_sending_without_reply
      Type: Boolean
      Required: Optional
      Description: Pass True if the message should be sent even if the specified replied-to message is not found
    - Parameter: reply_markup
      Type: InlineKeyboardMarkup
      Required: Optional
      Description: A JSON-serialized object for an inline keyboard. If empty, one 'Pay total price' button will be shown. If not empty, the first button must be a Pay button.
  - name: createInvoiceLink
    children: []
    desc:
    - name: p
      content: Use this method to create a link for an invoice. Returns the created invoice link as String on success.
    table:
    - Parameter: title
      Type: String
      Required: 'Yes'
      Description: Product name, 1-32 characters
    - Parameter: description
      Type: String
      Required: 'Yes'
      Description: Product description, 1-255 characters
    - Parameter: payload
      Type: String
      Required: 'Yes'
      Description: Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
    - Parameter: provider_token
      Type: String
      Required: 'Yes'
      Description: Payment provider token, obtained via BotFather
    - Parameter: currency
      Type: String
      Required: 'Yes'
      Description: Three-letter ISO 4217 currency code, see more on currencies
    - Parameter: prices
      Type: Array of LabeledPrice
      Required: 'Yes'
      Description: Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
    - Parameter: max_tip_amount
      Type: Integer
      Required: Optional
      Description: The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). For example, for a maximum tip of US$ 1.45 pass max_tip_amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0
    - Parameter: suggested_tip_amounts
      Type: Array of Integer
      Required: Optional
      Description: A JSON-serialized array of suggested amounts of tips in the smallest units of the currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed max_tip_amount.
    - Parameter: provider_data
      Type: String
      Required: Optional
      Description: JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
    - Parameter: photo_url
      Type: String
      Required: Optional
      Description: URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service.
    - Parameter: photo_size
      Type: Integer
      Required: Optional
      Description: Photo size in bytes
    - Parameter: photo_width
      Type: Integer
      Required: Optional
      Description: Photo width
    - Parameter: photo_height
      Type: Integer
      Required: Optional
      Description: Photo height
    - Parameter: need_name
      Type: Boolean
      Required: Optional
      Description: Pass True if you require the user's full name to complete the order
    - Parameter: need_phone_number
      Type: Boolean
      Required: Optional
      Description: Pass True if you require the user's phone number to complete the order
    - Parameter: need_email
      Type: Boolean
      Required: Optional
      Description: Pass True if you require the user's email address to complete the order
    - Parameter: need_shipping_address
      Type: Boolean
      Required: Optional
      Description: Pass True if you require the user's shipping address to complete the order
    - Parameter: send_phone_number_to_provider
      Type: Boolean
      Required: Optional
      Description: Pass True if the user's phone number should be sent to the provider
    - Parameter: send_email_to_provider
      Type: Boolean
      Required: Optional
      Description: Pass True if the user's email address should be sent to the provider
    - Parameter: is_flexible
      Type: Boolean
      Required: Optional
      Description: Pass True if the final price depends on the shipping method
  - name: answerShippingQuery
    children: []
    desc:
    - name: p
      content: If you sent an invoice requesting a shipping address and the parameter is_flexible was specified, the Bot API will send an Update with a shipping_query field to the bot. Use this method to reply to shipping queries. On success, True is returned.
    table:
    - Parameter: shipping_query_id
      Type: String
      Required: 'Yes'
      Description: Unique identifier for the query to be answered
    - Parameter: ok
      Type: Boolean
      Required: 'Yes'
      Description: Pass True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)
    - Parameter: shipping_options
      Type: Array of ShippingOption
      Required: Optional
      Description: Required if ok is True. A JSON-serialized array of available shipping options.
    - Parameter: error_message
      Type: String
      Required: Optional
      Description: Required if ok is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.
  - name: answerPreCheckoutQuery
    children: []
    desc:
    - name: p
      content: 'Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an Update with the field pre_checkout_query. Use this method to respond to such pre-checkout queries. On success, True is returned. Note: The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.'
    table:
    - Parameter: pre_checkout_query_id
      Type: String
      Required: 'Yes'
      Description: Unique identifier for the query to be answered
    - Parameter: ok
      Type: Boolean
      Required: 'Yes'
      Description: Specify True if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use False if there are any problems.
    - Parameter: error_message
      Type: String
      Required: Optional
      Description: Required if ok is False. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.
  - name: LabeledPrice
    children: []
    desc:
    - name: p
      content: This object represents a portion of the price for goods or services.
    table:
    - Field: label
      Type: String
      Description: Portion label
    - Field: amount
      Type: Integer
      Description: Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
  - name: Invoice
    children: []
    desc:
    - name: p
      content: This object contains basic information about an invoice.
    table:
    - Field: title
      Type: String
      Description: Product name
    - Field: description
      Type: String
      Description: Product description
    - Field: start_parameter
      Type: String
      Description: Unique bot deep-linking parameter that can be used to generate this invoice
    - Field: currency
      Type: String
      Description: Three-letter ISO 4217 currency code
    - Field: total_amount
      Type: Integer
      Description: Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
  - name: ShippingAddress
    children: []
    desc:
    - name: p
      content: This object represents a shipping address.
    table:
    - Field: country_code
      Type: String
      Description: Two-letter ISO 3166-1 alpha-2 country code
    - Field: state
      Type: String
      Description: State, if applicable
    - Field: city
      Type: String
      Description: City
    - Field: street_line1
      Type: String
      Description: First line for the address
    - Field: street_line2
      Type: String
      Description: Second line for the address
    - Field: post_code
      Type: String
      Description: Address post code
  - name: OrderInfo
    children: []
    desc:
    - name: p
      content: This object represents information about an order.
    table:
    - Field: name
      Type: String
      Description: Optional. User name
    - Field: phone_number
      Type: String
      Description: Optional. User's phone number
    - Field: email
      Type: String
      Description: Optional. User email
    - Field: shipping_address
      Type: ShippingAddress
      Description: Optional. User shipping address
  - name: ShippingOption
    children: []
    desc:
    - name: p
      content: This object represents one shipping option.
    table:
    - Field: id
      Type: String
      Description: Shipping option identifier
    - Field: title
      Type: String
      Description: Option title
    - Field: prices
      Type: Array of LabeledPrice
      Description: List of price portions
  - name: SuccessfulPayment
    children: []
    desc:
    - name: p
      content: This object contains basic information about a successful payment.
    table:
    - Field: currency
      Type: String
      Description: Three-letter ISO 4217 currency code
    - Field: total_amount
      Type: Integer
      Description: Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
    - Field: invoice_payload
      Type: String
      Description: Bot specified invoice payload
    - Field: shipping_option_id
      Type: String
      Description: Optional. Identifier of the shipping option chosen by the user
    - Field: order_info
      Type: OrderInfo
      Description: Optional. Order information provided by the user
    - Field: telegram_payment_charge_id
      Type: String
      Description: Telegram payment identifier
    - Field: provider_payment_charge_id
      Type: String
      Description: Provider payment identifier
  - name: ShippingQuery
    children: []
    desc:
    - name: p
      content: This object contains information about an incoming shipping query.
    table:
    - Field: id
      Type: String
      Description: Unique query identifier
    - Field: from
      Type: User
      Description: User who sent the query
    - Field: invoice_payload
      Type: String
      Description: Bot specified invoice payload
    - Field: shipping_address
      Type: ShippingAddress
      Description: User specified shipping address
  - name: PreCheckoutQuery
    children: []
    desc:
    - name: p
      content: This object contains information about an incoming pre-checkout query.
    table:
    - Field: id
      Type: String
      Description: Unique query identifier
    - Field: from
      Type: User
      Description: User who sent the query
    - Field: currency
      Type: String
      Description: Three-letter ISO 4217 currency code
    - Field: total_amount
      Type: Integer
      Description: Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
    - Field: invoice_payload
      Type: String
      Description: Bot specified invoice payload
    - Field: shipping_option_id
      Type: String
      Description: Optional. Identifier of the shipping option chosen by the user
    - Field: order_info
      Type: OrderInfo
      Description: Optional. Order information provided by the user
  desc:
  - name: p
    content: Your bot can accept payments from Telegram users. Please see the introduction to payments for more details on the process and how to set up payments for your bot. Please note that users will need Telegram v.4.0 or higher to use payments (released on May 18, 2017).
- name: Telegram Passport
  children:
  - name: PassportData
    children: []
    desc:
    - name: p
      content: Describes Telegram Passport data shared with the bot by the user.
    table:
    - Field: data
      Type: Array of EncryptedPassportElement
      Description: Array with information about documents and other Telegram Passport elements that was shared with the bot
    - Field: credentials
      Type: EncryptedCredentials
      Description: Encrypted credentials required to decrypt the data
  - name: PassportFile
    children: []
    desc:
    - name: p
      content: This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.
    table:
    - Field: file_id
      Type: String
      Description: Identifier for this file, which can be used to download or reuse the file
    - Field: file_unique_id
      Type: String
      Description: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    - Field: file_size
      Type: Integer
      Description: File size in bytes
    - Field: file_date
      Type: Integer
      Description: Unix time when the file was uploaded
  - name: EncryptedPassportElement
    children: []
    desc:
    - name: p
      content: Describes documents or other Telegram Passport elements shared with the bot by the user.
    table:
    - Field: type
      Type: String
      Description: Element type. One of âpersonal_detailsâ, âpassportâ, âdriver_licenseâ, âidentity_cardâ, âinternal_passportâ, âaddressâ, âutility_billâ, âbank_statementâ, ârental_agreementâ, âpassport_registrationâ, âtemporary_registrationâ, âphone_numberâ, âemailâ.
    - Field: data
      Type: String
      Description: Optional. Base64-encoded encrypted Telegram Passport element data provided by the user, available for âpersonal_detailsâ, âpassportâ, âdriver_licenseâ, âidentity_cardâ, âinternal_passportâ and âaddressâ types. Can be decrypted and verified using the accompanying EncryptedCredentials.
    - Field: phone_number
      Type: String
      Description: Optional. User's verified phone number, available only for âphone_numberâ type
    - Field: email
      Type: String
      Description: Optional. User's verified email address, available only for âemailâ type
    - Field: files
      Type: Array of PassportFile
      Description: Optional. Array of encrypted files with documents provided by the user, available for âutility_billâ, âbank_statementâ, ârental_agreementâ, âpassport_registrationâ and âtemporary_registrationâ types. Files can be decrypted and verified using the accompanying EncryptedCredentials.
    - Field: front_side
      Type: PassportFile
      Description: Optional. Encrypted file with the front side of the document, provided by the user. Available for âpassportâ, âdriver_licenseâ, âidentity_cardâ and âinternal_passportâ. The file can be decrypted and verified using the accompanying EncryptedCredentials.
    - Field: reverse_side
      Type: PassportFile
      Description: Optional. Encrypted file with the reverse side of the document, provided by the user. Available for âdriver_licenseâ and âidentity_cardâ. The file can be decrypted and verified using the accompanying EncryptedCredentials.
    - Field: selfie
      Type: PassportFile
      Description: Optional. Encrypted file with the selfie of the user holding a document, provided by the user; available for âpassportâ, âdriver_licenseâ, âidentity_cardâ and âinternal_passportâ. The file can be decrypted and verified using the accompanying EncryptedCredentials.
    - Field: translation
      Type: Array of PassportFile
      Description: Optional. Array of encrypted files with translated versions of documents provided by the user. Available if requested for âpassportâ, âdriver_licenseâ, âidentity_cardâ, âinternal_passportâ, âutility_billâ, âbank_statementâ, ârental_agreementâ, âpassport_registrationâ and âtemporary_registrationâ types. Files can be decrypted and verified using the accompanying EncryptedCredentials.
    - Field: hash
      Type: String
      Description: Base64-encoded element hash for using in PassportElementErrorUnspecified
  - name: EncryptedCredentials
    children: []
    desc:
    - name: p
      content: Describes data required for decrypting and authenticating EncryptedPassportElement. See the Telegram Passport Documentation for a complete description of the data decryption and authentication processes.
    table:
    - Field: data
      Type: String
      Description: Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for EncryptedPassportElement decryption and authentication
    - Field: hash
      Type: String
      Description: Base64-encoded data hash for data authentication
    - Field: secret
      Type: String
      Description: Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption
  - name: setPassportDataErrors
    children: []
    desc:
    - name: p
      content: Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns True on success.
    - name: p
      content: Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.
    table:
    - Parameter: user_id
      Type: Integer
      Required: 'Yes'
      Description: User identifier
    - Parameter: errors
      Type: Array of PassportElementError
      Required: 'Yes'
      Description: A JSON-serialized array describing the errors
  - name: PassportElementError
    children: []
    desc:
    - name: p
      content: 'This object represents an error in the Telegram Passport element which was submitted that should be resolved by the user. It should be one of:'
    - name: ul
      content:
      - PassportElementErrorDataField
      - PassportElementErrorFrontSide
      - PassportElementErrorReverseSide
      - PassportElementErrorSelfie
      - PassportElementErrorFile
      - PassportElementErrorFiles
      - PassportElementErrorTranslationFile
      - PassportElementErrorTranslationFiles
      - PassportElementErrorUnspecified
  - name: PassportElementErrorDataField
    children: []
    desc:
    - name: p
      content: Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes.
    table:
    - Field: source
      Type: String
      Description: Error source, must be data
    - Field: type
      Type: String
      Description: The section of the user's Telegram Passport which has the error, one of âpersonal_detailsâ, âpassportâ, âdriver_licenseâ, âidentity_cardâ, âinternal_passportâ, âaddressâ
    - Field: field_name
      Type: String
      Description: Name of the data field which has the error
    - Field: data_hash
      Type: String
      Description: Base64-encoded data hash
    - Field: message
      Type: String
      Description: Error message
  - name: PassportElementErrorFrontSide
    children: []
    desc:
    - name: p
      content: Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.
    table:
    - Field: source
      Type: String
      Description: Error source, must be front_side
    - Field: type
      Type: String
      Description: The section of the user's Telegram Passport which has the issue, one of âpassportâ, âdriver_licenseâ, âidentity_cardâ, âinternal_passportâ
    - Field: file_hash
      Type: String
      Description: Base64-encoded hash of the file with the front side of the document
    - Field: message
      Type: String
      Description: Error message
  - name: PassportElementErrorReverseSide
    children: []
    desc:
    - name: p
      content: Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.
    table:
    - Field: source
      Type: String
      Description: Error source, must be reverse_side
    - Field: type
      Type: String
      Description: The section of the user's Telegram Passport which has the issue, one of âdriver_licenseâ, âidentity_cardâ
    - Field: file_hash
      Type: String
      Description: Base64-encoded hash of the file with the reverse side of the document
    - Field: message
      Type: String
      Description: Error message
  - name: PassportElementErrorSelfie
    children: []
    desc:
    - name: p
      content: Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.
    table:
    - Field: source
      Type: String
      Description: Error source, must be selfie
    - Field: type
      Type: String
      Description: The section of the user's Telegram Passport which has the issue, one of âpassportâ, âdriver_licenseâ, âidentity_cardâ, âinternal_passportâ
    - Field: file_hash
      Type: String
      Description: Base64-encoded hash of the file with the selfie
    - Field: message
      Type: String
      Description: Error message
  - name: PassportElementErrorFile
    children: []
    desc:
    - name: p
      content: Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.
    table:
    - Field: source
      Type: String
      Description: Error source, must be file
    - Field: type
      Type: String
      Description: The section of the user's Telegram Passport which has the issue, one of âutility_billâ, âbank_statementâ, ârental_agreementâ, âpassport_registrationâ, âtemporary_registrationâ
    - Field: file_hash
      Type: String
      Description: Base64-encoded file hash
    - Field: message
      Type: String
      Description: Error message
  - name: PassportElementErrorFiles
    children: []
    desc:
    - name: p
      content: Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.
    table:
    - Field: source
      Type: String
      Description: Error source, must be files
    - Field: type
      Type: String
      Description: The section of the user's Telegram Passport which has the issue, one of âutility_billâ, âbank_statementâ, ârental_agreementâ, âpassport_registrationâ, âtemporary_registrationâ
    - Field: file_hashes
      Type: Array of String
      Description: List of base64-encoded file hashes
    - Field: message
      Type: String
      Description: Error message
  - name: PassportElementErrorTranslationFile
    children: []
    desc:
    - name: p
      content: Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.
    table:
    - Field: source
      Type: String
      Description: Error source, must be translation_file
    - Field: type
      Type: String
      Description: Type of element of the user's Telegram Passport which has the issue, one of âpassportâ, âdriver_licenseâ, âidentity_cardâ, âinternal_passportâ, âutility_billâ, âbank_statementâ, ârental_agreementâ, âpassport_registrationâ, âtemporary_registrationâ
    - Field: file_hash
      Type: String
      Description: Base64-encoded file hash
    - Field: message
      Type: String
      Description: Error message
  - name: PassportElementErrorTranslationFiles
    children: []
    desc:
    - name: p
      content: Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation change.
    table:
    - Field: source
      Type: String
      Description: Error source, must be translation_files
    - Field: type
      Type: String
      Description: Type of element of the user's Telegram Passport which has the issue, one of âpassportâ, âdriver_licenseâ, âidentity_cardâ, âinternal_passportâ, âutility_billâ, âbank_statementâ, ârental_agreementâ, âpassport_registrationâ, âtemporary_registrationâ
    - Field: file_hashes
      Type: Array of String
      Description: List of base64-encoded file hashes
    - Field: message
      Type: String
      Description: Error message
  - name: PassportElementErrorUnspecified
    children: []
    desc:
    - name: p
      content: Represents an issue in an unspecified place. The error is considered resolved when new data is added.
    table:
    - Field: source
      Type: String
      Description: Error source, must be unspecified
    - Field: type
      Type: String
      Description: Type of element of the user's Telegram Passport which has the issue
    - Field: element_hash
      Type: String
      Description: Base64-encoded element hash
    - Field: message
      Type: String
      Description: Error message
  desc:
  - name: p
    content: Telegram Passport is a unified authorization method for services that require personal identification. Users can upload their documents once, then instantly share their data with services that require real-world ID (finance, ICOs, etc.). Please see the manual for details.
- name: Games
  children:
  - name: sendGame
    children: []
    desc:
    - name: p
      content: Use this method to send a game. On success, the sent Message is returned.
    table:
    - Parameter: chat_id
      Type: Integer
      Required: 'Yes'
      Description: Unique identifier for the target chat
    - Parameter: message_thread_id
      Type: Integer
      Required: Optional
      Description: Unique identifier for the target message thread (topic) of the forum; for forum supergroups only
    - Parameter: game_short_name
      Type: String
      Required: 'Yes'
      Description: Short name of the game, serves as the unique identifier for the game. Set up your games via @BotFather.
    - Parameter: disable_notification
      Type: Boolean
      Required: Optional
      Description: Sends the message silently. Users will receive a notification with no sound.
    - Parameter: protect_content
      Type: Boolean
      Required: Optional
      Description: Protects the contents of the sent message from forwarding and saving
    - Parameter: reply_to_message_id
      Type: Integer
      Required: Optional
      Description: If the message is a reply, ID of the original message
    - Parameter: allow_sending_without_reply
      Type: Boolean
      Required: Optional
      Description: Pass True if the message should be sent even if the specified replied-to message is not found
    - Parameter: reply_markup
      Type: InlineKeyboardMarkup
      Required: Optional
      Description: A JSON-serialized object for an inline keyboard. If empty, one 'Play game_title' button will be shown. If not empty, the first button must launch the game.
  - name: Game
    children: []
    desc:
    - name: p
      content: This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.
    table:
    - Field: title
      Type: String
      Description: Title of the game
    - Field: description
      Type: String
      Description: Description of the game
    - Field: photo
      Type: Array of PhotoSize
      Description: Photo that will be displayed in the game message in chats.
    - Field: text
      Type: String
      Description: Optional. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls setGameScore, or manually edited using editMessageText. 0-4096 characters.
    - Field: text_entities
      Type: Array of MessageEntity
      Description: Optional. Special entities that appear in text, such as usernames, URLs, bot commands, etc.
    - Field: animation
      Type: Animation
      Description: Optional. Animation that will be displayed in the game message in chats. Upload via BotFather
  - name: CallbackGame
    children: []
    desc:
    - name: p
      content: A placeholder, currently holds no information. Use BotFather to set up your game.
  - name: setGameScore
    children: []
    desc:
    - name: p
      content: Use this method to set the score of the specified user in a game message. On success, if the message is not an inline message, the Message is returned, otherwise True is returned. Returns an error, if the new score is not greater than the user's current score in the chat and force is False.
    table:
    - Parameter: user_id
      Type: Integer
      Required: 'Yes'
      Description: User identifier
    - Parameter: score
      Type: Integer
      Required: 'Yes'
      Description: New score, must be non-negative
    - Parameter: force
      Type: Boolean
      Required: Optional
      Description: Pass True if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
    - Parameter: disable_edit_message
      Type: Boolean
      Required: Optional
      Description: Pass True if the game message should not be automatically edited to include the current scoreboard
    - Parameter: chat_id
      Type: Integer
      Required: Optional
      Description: Required if inline_message_id is not specified. Unique identifier for the target chat
    - Parameter: message_id
      Type: Integer
      Required: Optional
      Description: Required if inline_message_id is not specified. Identifier of the sent message
    - Parameter: inline_message_id
      Type: String
      Required: Optional
      Description: Required if chat_id and message_id are not specified. Identifier of the inline message
  - name: getGameHighScores
    children: []
    desc:
    - name: p
      content: Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. Returns an Array of GameHighScore objects.
    - name: blockquote
      content: This method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and their neighbors are not among them. Please note that this behavior is subject to change.
    table:
    - Parameter: user_id
      Type: Integer
      Required: 'Yes'
      Description: Target user id
    - Parameter: chat_id
      Type: Integer
      Required: Optional
      Description: Required if inline_message_id is not specified. Unique identifier for the target chat
    - Parameter: message_id
      Type: Integer
      Required: Optional
      Description: Required if inline_message_id is not specified. Identifier of the sent message
    - Parameter: inline_message_id
      Type: String
      Required: Optional
      Description: Required if chat_id and message_id are not specified. Identifier of the inline message
  - name: GameHighScore
    children: []
    desc:
    - name: p
      content: This object represents one row of the high scores table for a game.
    - name: p
      content: And that's about all we've got for now.If you've got any questions, please check out our Bot FAQ Â»
    table:
    - Field: position
      Type: Integer
      Description: Position in high score table for the game
    - Field: user
      Type: User
      Description: User
    - Field: score
      Type: Integer
      Description: Score
  desc:
  - name: p
    content: 'Your bot can offer users HTML5 games to play solo or to compete against each other in groups and one-on-one chats. Create games via @BotFather using the /newgame command. Please note that this kind of power requires responsibility: you will need to accept the terms for each game that your bots will be offering.'
  - name: ul
    content:
    - Games are a new type of content on Telegram, represented by the Game and InlineQueryResultGame objects.
    - Once you've created a game via BotFather, you can send games to chats as regular messages using the sendGame method, or use inline mode with InlineQueryResultGame.
    - If you send the game message without any buttons, it will automatically have a 'Play GameName' button. When this button is pressed, your bot gets a CallbackQuery with the game_short_name of the requested game. You provide the correct URL for this particular user and the app opens the game in the in-app browser.
    - 'You can manually add multiple buttons to your game message. Please note that the first button in the first row must always launch the game, using the field callback_game in InlineKeyboardButton. You can add extra buttons according to taste: e.g., for a description of the rules, or to open the game''s official community.'
    - To make your game more attractive, you can upload a GIF animation that demostrates the game to the users via BotFather (see Lumberjack for example).
    - A game message will also display high scores for the current chat. Use setGameScore to post high scores to the chat with the game, add the edit_message parameter to automatically update the message with the current scoreboard.
    - Use getGameHighScores to get data for in-game high score tables.
    - You can also add an extra sharing button for users to share their best score to different chats.
    - For examples of what can be done using this new stuff, check the @gamebot and @gamee bots.
desc:
- name: blockquote
  content: The Bot API is an HTTP-based interface created for developers keen on building bots for Telegram.To learn how to create and set up a bot, please consult our Introduction to Bots and Bot FAQ.
